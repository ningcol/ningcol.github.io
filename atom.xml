<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Never Say Die</title>
  
  <subtitle>ningcol的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ningcol.com/"/>
  <updated>2018-02-12T02:52:25.486Z</updated>
  <id>http://www.ningcol.com/</id>
  
  <author>
    <name>ningcol</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>learnSwiftByPlayground</title>
    <link href="http://www.ningcol.com/2016/10/10/learnSwiftByPlayground/"/>
    <id>http://www.ningcol.com/2016/10/10/learnSwiftByPlayground/</id>
    <published>2016-10-10T10:01:08.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>Swift 语言是苹果公司在2014年的 WWDC 大会上发布的全新的编程语言。Swift 语言继承了C语言以及Objective-C 的特性，且克服了C语言的兼容性问题。Swift语言采用安全编程模式，且引入了多种新功能，使得编程工作更加简便，灵活！</p><p><strong>本文只是结合自己的开发经验简单的对 Swift 语言进行一个入门基础语法介绍，如果想要深入的学习 Swift ，可以查看苹果公司提供的教程 <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html" target="_blank" rel="noopener">The Swift Programming Language (Swift 3)</a> 。文章代码均使用 Swift 3.0 演示，可以去 github<a href="https://github.com/ningcol/learnSwiftPlayground" target="_blank" rel="noopener">下载源码</a>，用 Xocde 打开即可。</strong></p><h3 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**基本数据类型**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.整数:  Int</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.浮点数: Double表示64位浮点数,Float表示32位浮点数</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    3.布尔类型: Bool,布尔值只有 true 和 false 两种</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    4.字符串: String</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    5.字符: Character</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**变量和常量**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.变量:值能被修改,var 修饰</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.常量:值不能被修改,let 修饰</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">let b = <span class="number">20</span></span><br><span class="line"><span class="comment">//b = 10  常量不能修改:error:'b' is a 'let' constant</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.会自动推导声明的变量或常量的属性</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.使用【option + 单击】键查看属性的类型，效果图见:Resources/查看属性.png</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*/</span></span></span><br><span class="line"><span class="comment">// 1.自动推导类型</span></span><br><span class="line">let str = <span class="string">"ningcol"</span></span><br><span class="line">let intValue = <span class="number">10</span></span><br><span class="line">let floatValue = <span class="number">1.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.指定数据类型</span></span><br><span class="line">let doubleValue:Double = <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">*基本运算符*</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*/</span></span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line">let b = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.赋值运算符</span></span><br><span class="line">let c = b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.加减乘除</span></span><br><span class="line"><span class="number">1</span> + <span class="number">2</span></span><br><span class="line"><span class="number">5</span> - <span class="number">3</span></span><br><span class="line"><span class="number">2</span> * <span class="number">3</span></span><br><span class="line"><span class="number">10.0</span> / <span class="number">2.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.1 任何情况下都不会做隐式转化，必须以相同类型进行计算</span></span><br><span class="line">let num1 = <span class="number">1</span></span><br><span class="line">let num2 = <span class="number">2.2</span></span><br><span class="line">let num3 = Double(num1) + num2</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.2 必须要显式类型的转化</span></span><br><span class="line">let j = <span class="number">2.2</span></span><br><span class="line">let i:Float = <span class="number">1.2</span></span><br><span class="line">i + Float(j)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.求余运算</span></span><br><span class="line">a % b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.负号运算</span></span><br><span class="line">let minusB = -b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.组合赋值运算</span></span><br><span class="line">a += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.比较运算</span></span><br><span class="line"><span class="number">1</span> == <span class="number">1</span></span><br><span class="line"><span class="number">2</span> != <span class="number">1</span></span><br><span class="line"><span class="number">2</span> &gt; <span class="number">1</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">2</span></span><br><span class="line"><span class="number">1</span> &gt;= <span class="number">1</span></span><br><span class="line"><span class="number">2</span> &lt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.三目运算</span></span><br><span class="line">let d = a &gt; b ? <span class="number">100</span> : <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.空合运算(Nil Coalescing Operator)</span></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.空合运算符( </span></span>a<span class="markdown"> ?? b )将对可选类型 </span>a<span class="markdown"> 进行空判断(可选项内容详见:04-可选项)</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.如果 aName 为 nil，则执行??后面的，否则执行aName（注意??两边都有空格）   </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="keyword">var</span> aName: <span class="built_in">String</span>? = <span class="string">"ningcol"</span></span><br><span class="line"><span class="comment">//var aName: String? = nil</span></span><br><span class="line">let bName = aName ?? <span class="string">"aNameIsNil"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 9.区间运算</span></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.闭区间运算符( </span></span>a<span class="markdown">...b )定义一个包含从 </span>a<span class="markdown"> 到 b (包括 </span>a<span class="markdown"> 和 b )的所有值的区间</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.半开区间( </span></span>a<span class="markdown">..<span class="xml"><span class="tag">&lt;<span class="name">b</span> )定义一个从 </span></span></span>a<span class="markdown"><span class="xml"> 到 b 但不包括 b 的区间</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"> <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">1.</span>.<span class="number">.5</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">1.</span>.&lt;<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"半开区间:\(index)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.逻辑运算</span></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.逻辑非(!</span></span>a<span class="markdown">):布尔值取反</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.逻辑与( </span></span>a<span class="markdown"> &amp;&amp; b ):只有 </span>a<span class="markdown"> 和 b 的值都为 true 时，整个表达式的值才会是 true</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    3.逻辑或( </span></span>a<span class="markdown"> || b ):两个逻辑表达式的其中一个为 tru e ，整个表达式就为 true</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line">let allowedEntry = <span class="keyword">false</span></span><br><span class="line">let enteredDoorCode = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !allowedEntry &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"ACCESS DENIED"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> allowedEntry &amp;&amp; enteredDoorCode &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Welcome!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"ACCESS DENIED"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> allowedEntry || enteredDoorCode &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Welcome!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"ACCESS DENIED"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可选项"><a href="#可选项" class="headerlink" title="可选项"></a>可选项</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**可选项**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.可选值:可以有值,可以为nil(用 ? 表示可选值)</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"> <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment">// URL 为可选项</span></span><br><span class="line">let URL = NSURL(string: <span class="string">"http://www.baidu.com/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// str 为可选项</span></span><br><span class="line"><span class="keyword">var</span> str: <span class="built_in">String</span>? = <span class="string">"ningcol"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var 的可选项默认为 nil</span></span><br><span class="line"><span class="keyword">var</span> a:Int?</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">** if let **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment">// if let : 确保 myUrl 有值，才会进入分支</span></span><br><span class="line"><span class="keyword">if</span> let myUrl = URL&#123;</span><br><span class="line">    <span class="built_in">print</span>(myUrl)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aName: <span class="built_in">String</span>? = <span class="string">"ningcol"</span></span><br><span class="line"><span class="comment">// var aName: String? = nil</span></span><br><span class="line"><span class="keyword">var</span> aAge: Int? = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> let name = aName,let age = aAge &#123;</span><br><span class="line">    <span class="built_in">print</span>(name + <span class="built_in">String</span>(age))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以对值进行修改</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">var</span> name = aName,let age = aAge &#123;</span><br><span class="line">    name = <span class="string">"lisi"</span></span><br><span class="line">    <span class="built_in">print</span>(name + <span class="built_in">String</span>(age))</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">** guard let **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.guard let 和 if let 相反。表示一定有值,没有就直接返回</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.降低分支层次结构</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    3.playground不能展示效果，要在函数中展示</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment">// 创建一个类(详见:10-对象和类)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    func demo()&#123;</span><br><span class="line">        let aNick: <span class="built_in">String</span>? = <span class="string">"ningcol"</span></span><br><span class="line">        let aAge: Int? = <span class="number">10</span></span><br><span class="line">        guard let nick = aNick ,let age = aAge  <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"nil"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"guard let: "</span> + nick + <span class="built_in">String</span>(age))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t = test()</span><br><span class="line">t.demo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">*强制解包*</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment">// 创建一个数组(详见:08-组数)</span></span><br><span class="line"><span class="keyword">var</span> dataList:[<span class="built_in">String</span>]?</span><br><span class="line">dataList = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>]</span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.dataList? 表示 datalist 可能为 nil</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.如果为 nil, .count 不会报错，仍然返回 nil</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.如果不为 nil，.count执行，返回数组元素个数</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    4. ?? 空合运算符(详见:02-运算符)</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*/</span></span></span><br><span class="line">let count = dataList?.count ?? <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示 datalist 一定有值,否则会出错！</span></span><br><span class="line">let cou = dataList!.count</span><br></pre></td></tr></table></figure><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">*if语句*</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*/</span></span></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.必须要有大括号</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.没有"非零即真"的概念，只有ture／false</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*/</span></span></span><br><span class="line">let <span class="built_in">num</span> = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">num</span> &gt; <span class="number">10</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"大于10"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"小于或等于10"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">*switch*</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*/</span></span></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.值可以是任何类型</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.作用域仅在 case 内部</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    3.不需要 break</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    4.每一个 case 都要有代码</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*/</span></span></span><br><span class="line">let name = <span class="string">"nick"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> name &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"nick"</span>:</span><br><span class="line">    let age = <span class="number">18</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"one  \(age)"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"fil"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"two"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"Davi"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"three"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">""</span>: <span class="keyword">break</span>  <span class="comment">//相当于有一行代码</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"tom"</span>,<span class="string">"ningcol"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"tomAndNingcol"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"other"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**for循环**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment">// 去掉了C语言风格的循环( ..&lt; 区间运算符,详见:02-预算符)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span>.&lt;<span class="number">10</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"----步长循环-----"</span>)</span><br><span class="line"><span class="comment">// 递增(步数为2)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stride(from: <span class="number">0</span>, to: <span class="number">12</span>, by: <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递减</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stride(from: <span class="number">12</span>, to: <span class="number">0</span>, by: <span class="number">-2</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"----反序循环----"</span>)</span><br><span class="line">let range = <span class="number">0.</span>.<span class="number">.10</span></span><br><span class="line"><span class="comment">// 反序循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range.reversed()&#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**while循环**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"----while循环----"</span>)</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">100</span> &#123;</span><br><span class="line">    n=n * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**epeat-while循环**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment">//它和 while 的区别是在判断循环条件之前，先执行一次循环的代码块。然后重复循环直到条件为 false</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">2</span></span><br><span class="line">repeat &#123;</span><br><span class="line">    m = m * <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">while</span> m &lt; <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.String 结构体，效率比对象高，一般推荐使用，支持遍历</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.NSString 继承NSObject</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>/</span></span></span><br><span class="line"><span class="keyword">var</span> str:<span class="built_in">String</span> = <span class="string">"Hello你好"</span></span><br><span class="line"><span class="comment">//var st:NSString = "hah"</span></span><br><span class="line"><span class="comment">// 字节数量</span></span><br><span class="line"><span class="built_in">print</span>(str.lengthOfBytes(using: .utf8))</span><br><span class="line"><span class="comment">// 字符串长度</span></span><br><span class="line"><span class="built_in">print</span>(str.characters.count)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> str.characters&#123;</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串拼接</span></span><br><span class="line">let name:<span class="built_in">String</span>? = <span class="string">"老王"</span></span><br><span class="line">let age = <span class="number">80</span></span><br><span class="line">let location = <span class="string">"隔壁"</span></span><br><span class="line"><span class="built_in">print</span>(location + (name ?? <span class="string">"a"</span>) + <span class="built_in">String</span>(age) + <span class="string">"岁"</span>)</span><br><span class="line"><span class="comment">//  '\(变量名)' 会自动转换拼接</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(location)\(name)\(age)岁"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let rect = CGRect(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(rect)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式字符串</span></span><br><span class="line">let h = <span class="number">13</span></span><br><span class="line">let m = <span class="number">5</span></span><br><span class="line">let s = <span class="number">9</span></span><br><span class="line">let timeStr = <span class="built_in">String</span>(format: <span class="string">"%02d:%02d:%02d"</span>, arguments: [h,m,s])</span><br><span class="line">let timeStr1 = <span class="built_in">String</span>(format: <span class="string">"%02d:%02d:%02d"</span>, h,m,s)</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    1.在Swift中使用 Range，最好把 String 改成 NSString</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    2.str.substring(with: Range&lt;String.Index&gt;) 很麻烦</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">    3. '值 as 类型' 作为类型转换</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>/</span></span></span><br><span class="line">(str <span class="keyword">as</span> NSString).substring(<span class="keyword">with</span>: NSMakeRange(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">let index = str.index(str.startIndex, offsetBy: <span class="number">3</span>)</span><br><span class="line">str.substring(from: index)</span><br><span class="line"><span class="comment">// "123"只是用来取到索引位置</span></span><br><span class="line">str.substring(from: <span class="string">"123"</span>.endIndex)</span><br><span class="line">str.substring(to: index)</span><br><span class="line"></span><br><span class="line"><span class="comment">// String 使用 Range</span></span><br><span class="line">let myRange = str.startIndex..&lt;str.index(str.startIndex, offsetBy: <span class="number">5</span>)</span><br><span class="line">str.substring(<span class="keyword">with</span>: myRange)</span><br><span class="line"></span><br><span class="line">let myRange1 = index..&lt;str.index(str.startIndex, offsetBy: <span class="number">5</span>)</span><br><span class="line">str.substring(<span class="keyword">with</span>: myRange1)</span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元组的元素个数固定，不允许增加、删除</span></span><br><span class="line"><span class="selector-tag">var</span> stu = (<span class="number">404</span>,<span class="string">"小白"</span>)</span><br><span class="line"><span class="comment">// 支持嵌套</span></span><br><span class="line"><span class="selector-tag">var</span> msg = (<span class="string">"基本信息"</span>, (<span class="string">"李刚"</span>,<span class="number">34</span>))</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(stu)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(msg)</span></span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> (<span class="selector-tag">a</span>,b) = stu</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a,b)</span></span></span><br><span class="line"><span class="comment">//如果仅需要元组中的个别的值，可以使用"_"的方式来处理不需要的值</span></span><br><span class="line">let (c,_) = stu</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(c)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过序号获得元组的值</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"status is \(stu.0)"</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以修改</span></span><br><span class="line">stu.<span class="number">0</span> = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">let message = (status: <span class="number">100</span>, msg:<span class="string">"哈哈"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"message is \(message.status)  and \(message.msg)"</span>)</span></span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**数组定义**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment">//方括号 [] 来创建数组</span></span><br><span class="line">let array1 = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>]</span><br><span class="line"></span><br><span class="line">let array2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array3:[Int] <span class="comment">// 定义一个数组（没有初始化）</span></span><br><span class="line">array3 = [Int]() <span class="comment">//初始化</span></span><br><span class="line"><span class="comment">//声明空数组,（必须初始化）</span></span><br><span class="line">let array4 = [<span class="built_in">String</span>]()  <span class="comment">// 等价上面两行代码</span></span><br><span class="line"></span><br><span class="line">let array5:[Any] = [<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = [Double](repeating: <span class="number">0.0</span>, count: <span class="number">3</span>) <span class="comment">//[0.0, 0.0, 0.0]</span></span><br><span class="line"><span class="keyword">var</span> arr4 = Array(repeating: <span class="number">3.0</span>, count: <span class="number">3</span>)  <span class="comment">//[3.0, 3.0, 3.0]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr: [<span class="built_in">String</span>] = [<span class="string">"Alex"</span>, <span class="string">"Brian"</span>, <span class="string">"Dave"</span>]</span><br><span class="line"><span class="built_in">print</span>(arr.count)</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**数组遍历**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> array1&#123;</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span>.&lt;array2.count&#123;</span><br><span class="line">    <span class="built_in">print</span>(array2[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时遍历下标和内容</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> array2.enumerated()&#123;</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"元组 \(e.offset) \(e.element)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序遍历</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> array2.reversed()&#123;</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**数组增删改**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment">// 追加</span></span><br><span class="line">arr.append(<span class="string">"ningcol"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并(类型必须一致)</span></span><br><span class="line">let arr1 = [<span class="string">"Evi"</span>,<span class="string">"Tank"</span>]</span><br><span class="line">arr += arr1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"Tom"</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">arr.removeFirst()</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line">arr.remove(at: <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除全部并保留空间</span></span><br><span class="line">arr.removeAll(keepingCapacity: <span class="keyword">true</span>)</span><br><span class="line"><span class="built_in">print</span>(arr.capacity)  <span class="comment">//数组容量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**容量**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment">// 容量每次都会在原来基础上 * 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"初始容量 \(array3.capacity)"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span>.&lt;<span class="number">8</span>&#123;</span><br><span class="line">    array3.append(i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(array3)，容量：\(array3.capacity)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**字典定义**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment">//方括号 [] 来创建字典</span></span><br><span class="line"></span><br><span class="line">let dict1 = [<span class="string">"name"</span>:<span class="string">"lisi"</span>,<span class="string">"age"</span>:<span class="string">"18"</span>]</span><br><span class="line"><span class="comment">// 不同类型必须指明为 any</span></span><br><span class="line"><span class="keyword">var</span> dict2:[<span class="built_in">String</span>:Any] = [<span class="string">"name"</span>:<span class="string">"lisi"</span>,<span class="string">"age"</span>:<span class="number">18</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let array = [</span><br><span class="line">    [<span class="string">"name"</span>:<span class="string">"lisi"</span>,<span class="string">"age"</span>:<span class="string">"18"</span>],</span><br><span class="line">    [<span class="string">"name"</span>:<span class="string">"wangwu"</span>,<span class="string">"age"</span>:<span class="number">8</span>]</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line">let array1:[[<span class="built_in">String</span>:Any]] = [</span><br><span class="line">    [<span class="string">"name"</span>:<span class="string">"lisi"</span>,<span class="string">"age"</span>:<span class="string">"18"</span>],</span><br><span class="line">    [<span class="string">"name"</span>:<span class="string">"wangwu"</span>,<span class="string">"age"</span>:<span class="number">8</span>]</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dict2[<span class="string">"age"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**字典增删改**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="comment">// 增加</span></span><br><span class="line">dict2[<span class="string">"sex"</span>] = <span class="string">"man"</span></span><br><span class="line"><span class="built_in">print</span>(dict2)</span><br><span class="line"><span class="comment">// 修改（通过key来取值，key不存在就是新增）</span></span><br><span class="line">dict2[<span class="string">"name"</span>] = <span class="string">"zhangsan"</span></span><br><span class="line"><span class="built_in">print</span>(dict2)</span><br><span class="line"><span class="comment">// 删除(直接给key进行删除)</span></span><br><span class="line">dict2.removeValue(forKey: <span class="string">"age"</span>)</span><br><span class="line"><span class="built_in">print</span>(dict2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**字典遍历**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> dict2&#123;</span><br><span class="line">    <span class="comment">//e 为元组</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"字典遍历:\(e)  e.key:\(e.key)  value:\(e.value)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key value 可以随意更改</span></span><br><span class="line"><span class="keyword">for</span> (key,value) <span class="keyword">in</span> dict2&#123;</span><br><span class="line">    <span class="comment">//e 为元组</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"key:\(key), value:\(value)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">**字典合并**</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line"><span class="keyword">var</span> dict3:[<span class="built_in">String</span>:Any] = [<span class="string">"name"</span>:<span class="string">"zhangsan"</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"sex"</span>:<span class="string">"man"</span>]</span><br><span class="line">let dict4:[<span class="built_in">String</span>:Any] = [<span class="string">"name"</span>:<span class="string">"ningcol"</span>,<span class="string">"height"</span>:<span class="number">50</span>]</span><br><span class="line"><span class="comment">// 如果key存在修改  不存在会增加</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> dict4&#123;</span><br><span class="line">    dict3[e.key] = dict4[e.key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"合并dict:"</span> + <span class="built_in">String</span>(format: <span class="string">"%@"</span>, dict3))</span><br></pre></td></tr></table></figure><h3 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> numberOfSides = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 定义 simpleDescription 无参方法,返回值为 String 类型</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">simpleDescription</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A shape with <span class="subst">\(numberOfSides)</span> sides."</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">var</span> shape = <span class="type">Shape</span>()</span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">shape.numberOfSides = <span class="number">7</span></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="keyword">var</span> shapeDescription = shape.simpleDescription()</span><br><span class="line"></span><br><span class="line"><span class="comment">//  构造函数来初始化类实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamedShape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> numberOfSides: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">simpleDescription</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A shape with <span class="subst">\(numberOfSides)</span> sides."</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写父类方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span>: <span class="title">NamedShape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sideLength: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">init</span>(sideLength: <span class="type">Double</span>, name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.sideLength = sideLength</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">        numberOfSides = <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">area</span><span class="params">()</span></span> -&gt;  <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sideLength * sideLength</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用 override</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">simpleDescription</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A square with sides of length <span class="subst">\(sideLength)</span>."</span></span><br><span class="line">    &#125; &#125;</span><br><span class="line"><span class="keyword">let</span> test = <span class="type">Square</span>(sideLength: <span class="number">5</span>, name: <span class="string">"my test square"</span>)</span><br><span class="line">test.area()</span><br><span class="line">test.simpleDescription()</span><br></pre></td></tr></table></figure><h3 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 View</span></span><br><span class="line">let v = UIView(frame: CGRect(x: <span class="number">0</span>, y: <span class="number">0</span>, <span class="attribute">width</span>: <span class="number">200</span>, height: <span class="number">200</span>))</span><br><span class="line">let u = UIView()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// [UIColor redColor]   类方法：直接点出来</span></span><br><span class="line">v<span class="selector-class">.backgroundColor</span> = UIColor.red</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个按钮</span></span><br><span class="line">let btn = UIButton(type: .contactAdd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 btn 添加到 View 上</span></span><br><span class="line">btn<span class="selector-class">.center</span> = v.center</span><br><span class="line">v.addSubview(btn)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Swift 语言是苹果公司在2014年的 WWDC 大会上发布的全新的编程语言。Swift 语言继承了C语言以及Objective-C 的特性，且克服了C语言的兼容性问题。Swift语言采用安全编程模式，且引入了多种新功能，使得编程工作更加简便，灵活！&lt;/p&gt;
&lt;p&gt;&lt;st
      
    
    </summary>
    
      <category term="Swift" scheme="http://www.ningcol.com/categories/Swift/"/>
    
    
      <category term="swift 3.0" scheme="http://www.ningcol.com/tags/swift-3-0/"/>
    
      <category term="基础教程" scheme="http://www.ningcol.com/tags/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Mac破解Wifi密码教程</title>
    <link href="http://www.ningcol.com/2016/09/13/Mac%E7%A0%B4%E8%A7%A3Wifi%E5%AF%86%E7%A0%81%E6%95%99%E7%A8%8B/"/>
    <id>http://www.ningcol.com/2016/09/13/Mac破解Wifi密码教程/</id>
    <published>2016-09-13T05:01:08.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>了解过渗透知识的童鞋们都应该知道 BT5 和 Kail ，它们都能够破解 Wifi 密码。目前无线网络加密形式常见的有两种，不对，应该只有一种了，最开始的 WEP 加密方式已经不常见了，这种加密方式非常容易破解，现在常见的是WPA/WPA2 加密方式。破解无线密码的方式有多种，包括 Pin 码破解、抓包破解、伪连接破解等等，Pin 码破解最简单成功率最高，抓包破解的特点就是抓包容易跑包难啊，伪连接破解基本不常见。</p><p><strong>强烈声明：本文只为学习探索使用，如发生任何违法事件，均与本人无关</strong></p><p>下面开始进入正文，首先要确保电脑安装 Xcode 和 MacPorts，Xcode 可以直接在 <a href="App Store">App Store</a>下载，MacPorts 需要进入<a href="https://www.macports.org/" target="_blank" rel="noopener">它的官网</a>下载。MacPorts 是一个软件包管理系统，用来简化 Mac OS 系统上软件的安装，与Fink和BSD类ports套件的目标和功能类似。就像apt-get、yum一样，可以快速安装些软件。把这两个软件安装成功后就可以开始安装 Aircrack。打开终端输入命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> port </span>install aircrack-ng</span><br></pre></td></tr></table></figure><p>要求输入密码，输入后可能会提示 <strong>Port aircrack-ng not found</strong> ，没关系我们需要更新ports tree，在终端执行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> port </span>-v selfupdate</span><br></pre></td></tr></table></figure><p>现在可以开始安装 Aircrack 了，<strong>如果还提示 not found，那么再次执行更新ports tree 命令</strong>。安装 Aircrack 会比较慢，等安装好后 ，我们需要将 Aircrack 命令建立一个链接，类似Windows下的超级链接，在终端输入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s <span class="regexp">/System/</span>Library<span class="regexp">/PrivateFrameworks/</span>Apple80211.framework<span class="regexp">/Versions/</span>Current<span class="regexp">/Resources/</span>airport <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>airport</span><br></pre></td></tr></table></figure><p>然后在终端内输入：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">airport -s</span></span><br></pre></td></tr></table></figure><p>就能查看到附近的 Wifi 信息了，如下图</p><p><img src="https://s1.ax1x.com/2018/02/11/9GggNq.jpg" alt="附近的WIFI"></p><p> SSID 是 wifi 名称，RSSI 是信号强度，CHANNEL 是信道。挑一个信号强的信道进行监听抓包（比如信道 1 ），在终端输入：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> air<span class="keyword">port</span> en0 sniff 1</span><br></pre></td></tr></table></figure><p>命令中的 en0 是自己电脑的网卡地址，根据自己的实际情况进行输入，查看电脑网卡在终端输入 <strong>ifconfig</strong> 就可以了。 抓包过程如下图所示：<br><img src="https://s1.ax1x.com/2018/02/11/9Ggf3T.jpg" alt="抓包"></p><p>过几分钟后就可以按「 control  ＋ c 」退出抓包，接着进入 tmp 文件就可以查看我们抓到的数据包了，进入 tmp 文件我们可以使用 Finder 的前往文件夹功能 ，如图<br><img src="https://s1.ax1x.com/2018/02/11/9GgIu4.jpg" alt="前往tmp文件夹"></p><p>进入以后这就刚刚抓到的数据包，我们可以将 cap 文件移到我们想保存的地方，也可以不移，tmp 文件夹在重启电脑后就会清空。<br><img src="https://s1.ax1x.com/2018/02/11/9GgoDJ.jpg" alt="数据包"></p><p>这里我们将文件夹移到桌面。在桌面上创建一个名为 wifiCrack 的文件夹，把刚刚刚的cap文件，直接拖进来重命名为 01。然后把我们的密码字典也拖进来也命名为 01。这里的后缀名是不一样的。<br><img src="https://s1.ax1x.com/2018/02/11/9GgbU1.jpg" alt="数据包和字典"></p><p>接下来在终端中输入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Desktop<span class="regexp">/wifiCrack/</span></span><br></pre></td></tr></table></figure><p>进入wifiCrack后，接着输入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">aircrack-ng</span> <span class="selector-tag">-w</span> 01<span class="selector-class">.txt</span> 01<span class="selector-class">.cap</span></span><br></pre></td></tr></table></figure><p>就可以看到cap文件内的抓包情况，Encryption 中（0 handshake）是抓包失败，（1 handshake）则是抓包成功。点击终端，按下「command ＋ f」进行搜索1 handshake，图中看到第2行抓包成功，则在「Index number of target network ?」这里输入2后敲回车：<br><img src="https://s1.ax1x.com/2018/02/11/9GgvvD.jpg" alt="读取结果"></p><p>如果cap文件内全是（0 handshake），就按「control  ＋ c 」键退出。重新回到「sudo airport en0 sniff 1」这步进行监听抓包。抓包成功率受到 wifi 信号强弱、电脑与路由器距离远近、路由器是否正处在收发数据状态的影响。总之多试几次、监听时间适当延长些，可以大大提高成功率。进入到破解过程如图 <img src="https://s1.ax1x.com/2018/02/11/9GgzKe.jpg" alt="破解过程"></p><p>接着就等着破解结果就行了，中断破解过程可以直接按「control  ＋ c 」键退出。破解过程所需时间长短受电脑硬件配置、字典体积大小的影响。如果 01.txt 字典破解失败，则可以换其它字典进行破解，直到破解成功。便于演示，我在 01.txt 中加入了正确的 wifi 密码，破解成功如下图<br><img src="https://s1.ax1x.com/2018/02/11/9G2CVA.jpg" alt="破解成功"></p><p>使用一个好的字典是很重要的，一个9位的纯数字字典大概1G多，结果经过几个小时的破解，如果密码是987654321就很令人郁闷了，所以最好准备几个常用的wifi密码字典，可以大大提高成功率和节省时间。常用字典可以直接百度Google搜索下载。只要字典够强大，破解密码只是时间问题，不过跑包的过程中非常伤机器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;了解过渗透知识的童鞋们都应该知道 BT5 和 Kail ，它们都能够破解 Wifi 密码。目前无线网络加密形式常见的有两种，不对，应该只有一种了，最开始的 WEP 加密方式已经不常见了，这种加密方式非常容易破解，现在常见的是WPA/WPA2 加密方式。破解无线密码的方式有多
      
    
    </summary>
    
      <category term="Mac" scheme="http://www.ningcol.com/categories/Mac/"/>
    
    
      <category term="Mac技巧" scheme="http://www.ningcol.com/tags/Mac%E6%8A%80%E5%B7%A7/"/>
    
      <category term="破解Wifi" scheme="http://www.ningcol.com/tags/%E7%A0%B4%E8%A7%A3Wifi/"/>
    
  </entry>
  
  <entry>
    <title>Mac上必备的软件介绍</title>
    <link href="http://www.ningcol.com/2016/09/02/Mac%E4%B8%8A%E5%BF%85%E5%A4%87%E7%9A%84%E8%BD%AF%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.ningcol.com/2016/09/02/Mac上必备的软件介绍/</id>
    <published>2016-09-02T03:17:12.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名iOS程序员，高效使用Mac是我们必备的一项技能。即使你的 Mac 只用于日常的生活工作，我相信你读了这篇文章也会受益匪浅。<em>本文不带有任何形式广告，推荐内容均是本人长期使用总结</em></p><ul><li><em>本文于 2016-11-02 最后更新</em></li></ul><p>一、<strong>Alfred </strong></p><p>Mac上的神器，最牛逼的软件，没有之一。下图就是 Alfred 的主界面。我设置的快捷键为「Option+空格」，可以避开和其他应用的呼出冲突。我们所有的操作都在这一个界面上进行。通过热键打开主界面，输入 「a」之后 Alfred 就会为我在候选界面上显示操作系统中所有与「a」相关的文件及操作。这个搜索可以搜索你电脑内的任意文件、快捷打开应用、快速搜索上网、系统级的关机、重启等操作等等，其他的具体功能大家慢慢去体会吧 。<img src="https://s1.ax1x.com/2018/02/11/9GceW8.jpg" alt="Alfred主界面"></p><p>这还不是 Alfred 最强大的功能，最强大的是这个 <strong>workflows</strong> （工作流），有了这个你就不仅仅只是进行搜索、打开等操作了。 <img src="https://s1.ax1x.com/2018/02/11/9GcuQg.jpg" alt="workflows（工作流）"></p><p>先演示一个最简单的功能，上图 Colors 这个工作流的功能，我们在主界面输入 #FFC0CB ，这是粉红色的十六进制， 可以看到他们为我们转换出了 RGB、HSL 格式，以及颜色名字。<img src="https://s1.ax1x.com/2018/02/11/9GcMLj.jpg" alt=""></p><p>这里介绍的只是 Alfred 一两个功能而已，更强大的功能大家可以去慢慢体会（<a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred 官网</a>），Alfred可以免费使用，但是如果你需要使用workflows就必须要付费了。当然网上也有破解版，但是希望大家多多支持正版，我用的是家庭版（不能升级）,只有mega版可以终生免费升级。</p><p>二、<strong>1Password </strong></p><p>谈到 Alfred 就不得不说一下和它配合用得最爽的 1Password。作为密码管理软件，我们最关心的是软件安全问题，世界上没有绝对安全的系统，软件也不例外，大家可以看看<a href="https://www.zhihu.com/question/27431570/answer/36893749" target="_blank" rel="noopener">知乎上的回答</a>。只要我们把主密码设置得足够强大就可以了。什么是主密码呢，有了主密码我们就可以不用去记各式各样的密码了。</p><p>我们用Alfred直接输入「xiami」确认后输入主密码，接着会自动打开浏览器，跳转到虾米登录界面，自动登录。注意我的用词 — “自动”。有了这个软件我们可以把打开浏览器，输入网址，回车，填写账号密码，点击登录一系列复杂的操作直接转为：“Option+空格” —&gt;输入 ”xiami“ —&gt;输入主密码—&gt;回车。值得一提的是在任何界面都可以通过快捷键调出 Alfred 主界面。</p><p><img src="https://s1.ax1x.com/2018/02/11/9Gcles.jpg" alt="1Password结合Alfred"></p><p>1 Password 最有特色的三个功能，前面已经介绍了自动填充功能。第二个就是密码生成功能了，该功能可以根据自己的要求（长度、符号等）生成密码，如下图 。最后一个是同步功能，同步功能可以用dropbox或者wifi。1 Password是收费的还是很贵的，大家可以去应用商店，也可以去<a href="https://agilebits.com/downloads" target="_blank" rel="noopener">1 Password官网下载</a>，我是原来Parallels Desktop做活动统一买的，Mac版和Windows版是独立的，就是说如果想要在 Mac使用需要购买Mac版，想要在Windows上使用就需要购买Windows版。<img src="https://s1.ax1x.com/2018/02/11/9Gc1wn.jpg" alt="1Password密码生成"></p><p>三、<strong>Parallels Desktop </strong></p><p>Parallels Desktop 是一款Mac下的虚拟机，可以说是 Mac 上的最强虚拟机也不足为过。它可以在Mac上同时模拟运行  Windows、Linux、Chrome OS、Android 等多款操作系统及软件而不必重启电脑，并能在不同系统间随意切换。 <img src="https://s1.ax1x.com/2018/02/11/9GcGF0.jpg" alt="Parallels Desktop主界面"></p><p>Parallels Desktop 提供了一个非常方便的<strong>融合模式</strong>，可以让你以 Mac 的方式来运行 Windows 的程序，进入该模式后，你可以将 Windows 虚拟机里面的软件窗口直接“拖出来”到 Mac 上使用，就像 Mac  上装了一个 Windows 版本的应用一样，和原生的Mac软件一样好用。</p><p>下图就是在融合模式在使用 Win7 的 Word 2013。看上去是不是很爽？只要你内存足够大，开几个虚拟机或者多开虚拟机内的软件都不会存在卡顿现象，对于普通用户开个虚拟机在里面办公室绝对没有问题的。大家可以去<a href="https://www.parallels.com/cn/products/desktop/" target="_blank" rel="noopener">Parallels Desktop 官网</a>看看详细的功能介绍，Parallels Desktop 是收费的，当然网上也有破解版，本人是在做活动的时候入手的，包括了1 Password、Evernote Premium、Parallels Desktop 11 for Mac、 Snagit、Pocket Premium等等还是很爽的</p><p><img src="https://s1.ax1x.com/2018/02/11/9GcUlF.jpg" alt="融合模式使用Word"></p><p>四、<strong>Typora </strong></p><p>前面一直在介绍收费软件，下面就介绍一款非常实用的免费软件。 Typora 是一款 Markdown 编辑器，它不像同类的其他编辑器，它将「写字」和「预览」这两件事情合并了，你输入的地方，也是输出的地方，即现在很流行的所见即所得。 <img src="https://s1.ax1x.com/2018/02/11/9GcBwR.jpg" alt="Typora"></p><p>我所有的文章都是用Typora写的，这块软件当然也支持 Markdown 语法，传统的编辑器插入图片和表格十分麻烦，Typora可以直接拖入图片就可以了，表格编辑直接使用它的快捷键「Command + T」就可以选择插入表格的行数和列数。对于程序员使用的代码块插入也十分简单，只需输入 「Option + Command + C」就可以了。其他功能大家可以到 <a href="https://www.typora.io/" target="_blank" rel="noopener">Typora 官网</a> 下载体验。</p><p>五、<strong>CheatSheet</strong></p><p>CheatSheet 是一款Mac上的非常实用的快捷键快速提醒工具，你只需要按住「Command」键，就会弹出当前应用的所有快捷键列表，所以你记不住一些软件的快捷键没有关系，只需要使用CheatSheet，随时提醒你当前软件的所有快捷键，比如Safari、Finder等等，简单实用并且完全免费。由于不好截图所以就从官网扒了一张下来。 大家可以去 <a href="https://www.mediaatelier.com/CheatSheet/" target="_blank" rel="noopener">CheatSheet 官网</a> 下载，需要翻墙。<img src="https://s1.ax1x.com/2018/02/11/9Gc6fK.jpg" alt="CheatSheet"></p><p>六、<strong>Lantern</strong></p><p>Lantern 是一个免费的桌面程序。它能帮助你随时随地快速、可靠、安全地访问互联网，说白了就是翻墙。Lantern 原来流量是无限制的，现在收费了，但是用户也可以免费使用，每个月有800M流量，还是比较稳定的，对于翻墙去查个资料啥的基本够用了。现在已经有桌面端了，大家可以去 <a href="https://getlantern.org/" target="_blank" rel="noopener">Lantern 官网</a> 看看，还有一个免费的工具 <a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">XX-net</a> 是一个开源项目，想折腾的可以去看看。<img src="https://s1.ax1x.com/2018/02/11/9Gchmd.jpg" alt="Lantern"></p><p>七、<strong>Movist</strong></p><p>作为一款视频播放器，我们最主要关心的就是用户界面、外挂字幕、播放控制、视频格式、播放性能、画面质量、价格这几个因素了，这里有一篇 <a href="https://www.ifanr.com/app/680902" target="_blank" rel="noopener">评测 Mac 视频播放器的文章</a> 大家可以去看看，这里就不详细介绍了。本人装了 Movist、和 SPlayerX ，最直观的感觉就是 SPlayerX 画面质量很差，所以基本不用。Movist 在 <a href="https://itunes.apple.com/cn/app/id461788075" target="_blank" rel="noopener">Appstore有售</a> 30RMB，当然这么好用的软件也有破解版啦。<img src="https://s1.ax1x.com/2018/02/11/9Gc5TI.jpg" alt="Movist"></p><p>八、<strong>Folx</strong></p><p>Folx 是 Mac 上一款非常经典的下载工具，功能和国内的迅雷差不多，新版本的 Folx 整体界面非常的简洁和漂亮，具有非常好用的分类管理功能，支持高速下载、定时下载、速度控制、iTunes 集成等功能，被很多用户誉为 Mac 平台上最好的下载软件之一。前不久 Eltima Software 正式推出了 Folx GO 5.0 版本，新版本重新设计了用户界面，强大的人性化功能也有完好的继承。但是经过我的测试同等情况下还是比迅雷慢了许多 ，所以一般我还是喜欢用迅雷。Folx有免费版和收费版，可以直接在应用商店搜索下载。<img src="https://s1.ax1x.com/2018/02/11/9Gcokt.jpg" alt="Flox"></p><p>九、<strong>MoneyWiz 2</strong></p><p>MoneyWiz 2 理财神器，为什么不叫记账神器呢，是因为记账只是财务管理中的一个环节，并不是全部。要管理好自己的财务，我们首先要了解自己的财务状况，接着通过记账来掌握自己每月的损益，然后以此为标准制定预算来控制自己的支出。是不是听上去好麻烦？没关系，<a href="https://moneywizapp.com/" target="_blank" rel="noopener">MoneyWiz 2</a> 正是一次性解决这些问题的应用。</p><p>MoneyWiz 2 可以根据不同情况创建相应的多个账户，用户可以根据实际情况对账户进行账单管理，例如，新建一个「现金账户」，然后认真清点一下你的钱包里总共有多少钱，将这个数字填入「期初余额」中。然后想一想自己都有哪些银行的账户，用网银或者电话查询一下里面有多少存款，分别新建「活期账户」和「储蓄账户」并将存款数填入相应账户的「期初余额」中。 <img src="https://s1.ax1x.com/2018/02/11/9Gc7ff.jpg" alt="MoneyWiz 新建账户"></p><p>在线银行是MoneyWiz 2 的一大亮点。这项内购功能允许用户新建在线银行账户，输入账号等信息，该账户会自动通过与 Silverwiz 合作的第三方服务商连接对应的银行账户，实现交易明细和账户余额的实时更新，但是经本人测试，MoneyWiz 2 在线银行并没有大陆的任何一家银行。</p><p>MoneyWiz 2 记账时，首先得分清这笔资金是「支出」、「收入」还是「转账」。值得注意的是，这里的「转账」是自己对自己的转账，是不影响你的资产「净值」的。<img src="https://s1.ax1x.com/2018/02/11/9GcOXQ.jpg" alt="MoneyWiz 新建交易"></p><p>当我们把每一次的交易都记录在 MoneyWiz 2 后，就会生成一个如下图所示的的列表，我们可以清晰的查看每笔账户的交易明细，包括花费的金额，余额等等，支出是用红色来表示的，非常清晰明了。<img src="https://s1.ax1x.com/2018/02/11/9Gcx7n.jpg" alt="MoneyWiz 交易明细"></p><p>对于月光族或者剁手党来说，设定每月的预算是理财的必要步骤。在新建预算的时候，MoneyWiz 2 会要求设置预算的消费类别，然后再对其设定合理的预算金额。在根据类别创建预算之后，在预算期内所产生的所有属于该类别的交易都会被自动列于该项预算中，从预算进度条的增长我们可以很直观地监测预算使用情况。如果某笔交易超出了预算的范围， 软件在你记账之后会弹出警告。 <img src="https://s1.ax1x.com/2018/02/11/9Gg9hV.jpg" alt="MoneyWiz 预算"></p><p>还有一个比较实用的功能就是报表功能，报表功能提供所有收入支出柱状图、账户结余净值走势图、类别支出饼图等等。具体功能大家可以去苹果商店和官网下载体验，Mac 免费版有功能限制，只能记录100条交易。 <img src="https://s1.ax1x.com/2018/02/11/9Ggi1U.jpg" alt="MoneyWiz 报表"></p><p>漏了一点最重要的东西，MoneyWiz 2 出了Mac版还有Win版和移动版，在 iOS上也可以下载使用 MoneyWiz 2 ， MoneyWiz 2 有着强大的同步功能，这样我们就可以随时随地的对我们的账户进行管理啦…</p><p>十、<strong>Reeder</strong></p><p>Feedbin、Feedly、Feed Wrangler、Instapaper、还有Reeder 3。Feedbin在大陆打开非常慢，严重影响使用，Feedly速度很快，搜索功能也不错。用起来最舒服的还是 Reeder 3，本身不仅可以做为RSS工具，还可以添加Feedbin、Feedly等十几种RSS工具账号，代收内容。Reeder 3 可以直接在 App Store 搜索下载，需要付费。</p><p><img src="https://s1.ax1x.com/2018/02/11/9GgEnJ.jpg" alt="Reeder 偏好设置"></p><p>Reeder 新版本已经支持 Mac 触控板、Magic Mouse 的手势操作，并为用户提供了许多自定义主题。从试用看来，Reeder 3 for Mac  依然会是 Mac 上最好的RSS阅读APP！因为它的速度很快，反应很灵敏，而且试体验优秀。Reeder 还保留了 Google Reader 时代的快捷键操作，比如按 J 键阅读下一条目，按 K 键阅读上一条目，按 S 键为条目加注星标等等，浏览时可以快速操作。</p><p><img src="https://s1.ax1x.com/2018/02/11/9GgVB9.jpg" alt="Reeder 主界面"></p><p>十一、<strong>BetterTouchTool</strong></p><p>前面介绍了一款轻量级的快捷键辅助应用Cheatsheet，但是它也是仅仅把软件内提供的快捷键展示出来。而 BetterTouchTool 则可以根据用户的习惯自定义快捷键。在顶部设备选择区，可以选择不同的设备进行设置，包括 Magic Mouse，TrackPads，KeyBoard，Apple Remote 等等。<img src="https://s1.ax1x.com/2018/02/11/9GgZ7R.png" alt="BetterTouchTool主界面"></p><p>左边应用选择区可以选择不同的应用设置不同的快捷键，Global 则是设置全局快捷键。在应用选择区的右边就是手势区了，直接点击 Add New Gesture 就可以选择添加手势。</p><p><img src="https://s1.ax1x.com/2018/02/11/9Gguh6.jpg" alt="添加手势"></p><p>选择添加手势后就会出现这样一个界面，因为我是选择的在触控板下操作的，所以可以设置的是手势，根据手势可以替代快捷键操作或者要做的动作。如下图，手势设置为 一个手指轻击触控板左边沿的中间，自定义快捷键为「⌘C」就是说我们轻击触控板左边沿的中部就是执行了「复制」操作。<img src="https://s1.ax1x.com/2018/02/11/9GgQ1O.jpg" alt="编辑手势"></p><p>其他的功能大家可以自行去摸索，大家可以去 <a href="https://www.boastr.net/" target="_blank" rel="noopener">BetterTouchTool 官网</a> 下载使用，有三十天的免费试用，付费方式是自由付费，最低档次为 $3.99。大家多多支持正版。</p><p>十二、<strong>Commander One Pro</strong></p><p>Commander One 是 Eltima（Folx）在采用 Swift 后重新开发的一款双栏文件管理软件。免费版的功能比较简单，基本上偿不到“甜头”，有了 Pro版，你才能享受FTP 管理、Dropbox、Google Drive、外接磁盘管理（iOS 设备、MTP、USB Flash 等设备）、压缩与解压缩、主题等功能。主界面如下图所示： <img src="https://s1.ax1x.com/2018/02/11/9GgGBd.jpg" alt="Commander One 主界面"></p><p>在 Commander One 左上角可以选择三种文件排列样式（列表、带详细信息列表以及缩略图模式），顶部的四个按钮分别对应 “隐藏文件显示”、“文件简介查看”、“文件预览”、“文件查找”四个功能，右上角则是 “文件压缩” 和 “FTP连接管理”。</p><p>Commander One 的基本功能就是方便用户对两个目录下的文件进行复制、移动、比对等操作，因此，开发者提供了不计数量的创建操作标签（Tab）的功能，这样用户可以在左右两栏开启多个目录。最下面的功能键则可以直接按住「Fn」进行触发。</p><p>值得一提的是文件搜索功能，搜索功能分“文件搜索”与“文本搜索”两种，都可用正则表达式，区分大小并且还能在压缩包中直接搜索文件。<img src="https://s1.ax1x.com/2018/02/11/9GgtAI.jpg" alt="Commander One 搜索界面"></p><p>Commander One 有付费版和免费版，大家可以去 <a href="https://mac.eltima.com/file-manager.html" target="_blank" rel="noopener">Commander One 官网</a> 下载免费版体验，觉得不错可以升级为Pro付费版。</p><p>十三、<strong>欧路词典</strong></p><p>当我们浏览英文网站遇到不认识的单词的时候，第一时间会想到打开百度搜索单词的中文释义。而欧路词典的强大功能可以直接帮我们屏幕上的<strong>任何英文单词</strong>，直接翻译成中文显示在屏幕上。 <img src="https://s1.ax1x.com/2018/02/11/9Ggd9f.jpg" alt="鼠标取词"></p><p>欧路词典主界面包括五大功能区，词典功能可以在右边的词库在管理中可以进行相应的拓展来显示更多与查询单词相关的功能；百科功能则会显示维基百科对应内容；学习板块则会把曾经查阅过的单词进行分类学习；翻译模块则可以翻译英文段落；管理模块则可以对安装的词库进行管理。 <img src="https://s1.ax1x.com/2018/02/11/9GgBjg.jpg" alt="主界面"></p><p>最让我满意的就是取词功能了，打开偏好设置则可以根据自己的喜好自定义取词快捷键。当我们对着将要翻译的单词按住「 Control 」键，屏幕就会弹出单词的中文释义了。 <img src="https://s1.ax1x.com/2018/02/11/9GgruQ.jpg" alt="偏好设置"></p><p>欧路词典在 AppStore 提供免费版及收费版两个版本，收费版增加了自选词典等功能。</p><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一名iOS程序员，高效使用Mac是我们必备的一项技能。即使你的 Mac 只用于日常的生活工作，我相信你读了这篇文章也会受益匪浅。&lt;em&gt;本文不带有任何形式广告，推荐内容均是本人长期使用总结&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;本文于 2016-11-02 最后更
      
    
    </summary>
    
      <category term="Mac" scheme="http://www.ningcol.com/categories/Mac/"/>
    
    
      <category term="Mac技巧" scheme="http://www.ningcol.com/tags/Mac%E6%8A%80%E5%B7%A7/"/>
    
      <category term="软件" scheme="http://www.ningcol.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>在OC项目中使用Swift(Swift-OC混编)</title>
    <link href="http://www.ningcol.com/2016/08/02/%E5%9C%A8OC%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8Swift(Swift-OC%E6%B7%B7%E7%BC%96)/"/>
    <id>http://www.ningcol.com/2016/08/02/在OC项目中使用Swift(Swift-OC混编)/</id>
    <published>2016-08-02T02:11:20.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>好几个月没有更新博客了，因为毕业答辩把成都的工作给丢了，回到家找到工作的同时又把婚也结了，算是成家立业了。这身份转换得太快，博主现在都还在懵逼之中。</p><p>现在这个项目是Swift和OC混合开发的，所以就涉及到如何在Swift项目中使用OC，以及如何在OC项目中使用Swift。</p><p>一、直接在OC工程里创建swift文件，XCode会自动提示是否创建这个桥接文件，这里点击确定（这个桥接文件是必须的）</p><p><img src="https://s1.ax1x.com/2018/02/11/9GcPLd.png" alt=""></p><p>二、可以看到刚刚创建的swift文件以及桥接文件，我们在Test.swfit写个方法，如图</p><p><img src="https://s1.ax1x.com/2018/02/11/9GcFeA.png" alt=""></p><p>三、最后我们在需要使用swift的OC文件里引入头文件<code>#import &quot;OCandSwift-Swift.h&quot;</code>，<strong>OCandSwift</strong>是项目的名称，<strong>-Swift.h</strong>是固定的。最后我们在viewDidLoad中调用Test.swift中的方法</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Test </span>*test = [[Test alloc] init];</span><br><span class="line"> NSLog(@"%@",[test run]);</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/02/11/9GckdI.png" alt=""></p><p>四、如果我们要在swift中调用OC，就在刚刚的桥接文件里引入OC的头文件再调用其中的方法就好了</p><p><img src="https://s1.ax1x.com/2018/02/11/9GcVFP.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好几个月没有更新博客了，因为毕业答辩把成都的工作给丢了，回到家找到工作的同时又把婚也结了，算是成家立业了。这身份转换得太快，博主现在都还在懵逼之中。&lt;/p&gt;
&lt;p&gt;现在这个项目是Swift和OC混合开发的，所以就涉及到如何在Swift项目中使用OC，以及如何在OC项目中使用
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.ningcol.com/categories/iOS/"/>
    
    
      <category term="混合开发" scheme="http://www.ningcol.com/tags/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="OC和Swift" scheme="http://www.ningcol.com/tags/OC%E5%92%8CSwift/"/>
    
  </entry>
  
  <entry>
    <title>Xcode7卸载插件命令</title>
    <link href="http://www.ningcol.com/2016/04/02/Xcode7%E5%8D%B8%E8%BD%BD%E6%8F%92%E4%BB%B6%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.ningcol.com/2016/04/02/Xcode7卸载插件命令/</id>
    <published>2016-04-02T11:55:28.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>Xcode卸载插件命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins<span class="regexp">/Alcatraz.xcplugin</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Xcode卸载插件命令&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;cod
      
    
    </summary>
    
      <category term="Xcode" scheme="http://www.ningcol.com/categories/Xcode/"/>
    
    
      <category term="实用技巧" scheme="http://www.ningcol.com/tags/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
      <category term="插件" scheme="http://www.ningcol.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>UIButton设置文字对齐方式</title>
    <link href="http://www.ningcol.com/2016/03/21/UIButton%E8%AE%BE%E7%BD%AE%E6%96%87%E5%AD%97%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.ningcol.com/2016/03/21/UIButton设置文字对齐方式/</id>
    <published>2016-03-21T09:01:33.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>我们开发的时候，用下面的代码设置按钮文字右对齐发现没有卵用</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取验证码按钮</span></span><br><span class="line">    <span class="built_in">UIButton</span> *codeBtn = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br><span class="line">    codeBtn.width = <span class="number">100</span>;</span><br><span class="line">    codeBtn.height = <span class="number">60</span>;</span><br><span class="line">    [codeBtn setTitle:<span class="string">@"获取验证码"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">   <span class="comment">//设置对齐方式</span></span><br><span class="line">    codeBtn.titleLabel.textAlignment = <span class="built_in">NSTextAlignmentRight</span>;</span><br></pre></td></tr></table></figure><p>其实上面的最后一行代码是没有效果的，这只是让标签文本对齐，但是有没有改变标签在按钮中的对齐方式，这里我们应该用</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeBtn.contentHorizontalAlignment = UIControlContentHorizontalAlignmentRight<span class="comment">;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们开发的时候，用下面的代码设置按钮文字右对齐发现没有卵用&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.ningcol.com/categories/iOS/"/>
    
    
      <category term="UIButton" scheme="http://www.ningcol.com/tags/UIButton/"/>
    
      <category term="实用技巧" scheme="http://www.ningcol.com/tags/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>使用keyChain存储UUID</title>
    <link href="http://www.ningcol.com/2016/03/20/%E4%BD%BF%E7%94%A8keyChain%E5%AD%98%E5%82%A8UUID/"/>
    <id>http://www.ningcol.com/2016/03/20/使用keyChain存储UUID/</id>
    <published>2016-03-20T01:41:02.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>一、在你的工程里找到Capabilities，把里面的keyChainsharing设置为ON，如图所示：</p><p><img src="https://s1.ax1x.com/2018/02/11/9G6fI0.jpg" alt=""></p><p>二、这样就会在左侧的目录帮我们自动生成Entitlements文件，如图所示：</p><p><img src="https://s1.ax1x.com/2018/02/11/9G6IRU.jpg" alt=""></p><p>三、我们点开entitlements文件，发现里面的item和我们的Bundle Identifier，以及刚刚keychain Groups是一致的：</p><p><img src="https://s1.ax1x.com/2018/02/11/9G6xJK.jpg" alt=""></p><p>四、用keyChain存储UUID，可以使用下面的类:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">KeyChainStore</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)save:(<span class="built_in">NSString</span> *)service data:(<span class="keyword">id</span>)data;</span><br><span class="line">+ (<span class="keyword">id</span>)load:(<span class="built_in">NSString</span> *)service;</span><br><span class="line">+ (<span class="keyword">void</span>)deleteKeyData:(<span class="built_in">NSString</span> *)service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"KeyChainStore.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">KeyChainStore</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSMutableDictionary</span> *)getKeychainQuery:(<span class="built_in">NSString</span> *)service &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSMutableDictionary</span> dictionaryWithObjectsAndKeys:</span><br><span class="line">            (<span class="keyword">id</span>)kSecClassGenericPassword,(<span class="keyword">id</span>)kSecClass,</span><br><span class="line">            service, (<span class="keyword">id</span>)kSecAttrService,</span><br><span class="line">            service, (<span class="keyword">id</span>)kSecAttrAccount,</span><br><span class="line">            (<span class="keyword">id</span>)kSecAttrAccessibleAfterFirstUnlock,(<span class="keyword">id</span>)kSecAttrAccessible,</span><br><span class="line">            <span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)save:(<span class="built_in">NSString</span> *)service data:(<span class="keyword">id</span>)data &#123;</span><br><span class="line">    <span class="comment">//Get search dictionary</span></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *keychainQuery = [<span class="keyword">self</span> getKeychainQuery:service];</span><br><span class="line">    <span class="comment">//Delete old item before add new item</span></span><br><span class="line">    SecItemDelete((<span class="built_in">CFDictionaryRef</span>)keychainQuery);</span><br><span class="line">    <span class="comment">//Add new object to search dictionary(Attention:the data format)</span></span><br><span class="line">    [keychainQuery setObject:[<span class="built_in">NSKeyedArchiver</span> archivedDataWithRootObject:data] forKey:(<span class="keyword">id</span>)kSecValueData];</span><br><span class="line">    <span class="comment">//Add item to keychain with the search dictionary</span></span><br><span class="line">    SecItemAdd((<span class="built_in">CFDictionaryRef</span>)keychainQuery, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)load:(<span class="built_in">NSString</span> *)service &#123;</span><br><span class="line">    <span class="keyword">id</span> ret = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *keychainQuery = [<span class="keyword">self</span> getKeychainQuery:service];</span><br><span class="line">    <span class="comment">//Configure the search setting</span></span><br><span class="line">    <span class="comment">//Since in our simple case we are expecting only a single attribute to be returned (the password) we can set the attribute kSecReturnData to kCFBooleanTrue</span></span><br><span class="line">    [keychainQuery setObject:(<span class="keyword">id</span>)kCFBooleanTrue forKey:(<span class="keyword">id</span>)kSecReturnData];</span><br><span class="line">    [keychainQuery setObject:(<span class="keyword">id</span>)kSecMatchLimitOne forKey:(<span class="keyword">id</span>)kSecMatchLimit];</span><br><span class="line">    <span class="built_in">CFDataRef</span> keyData = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (SecItemCopyMatching((<span class="built_in">CFDictionaryRef</span>)keychainQuery, (<span class="built_in">CFTypeRef</span> *)&amp;keyData) == noErr) &#123;</span><br><span class="line">        <span class="keyword">@try</span> &#123;</span><br><span class="line">            ret = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithData:(__bridge <span class="built_in">NSData</span> *)keyData];</span><br><span class="line">        &#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *e) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Unarchive of %@ failed: %@"</span>, service, e);</span><br><span class="line">        &#125; <span class="keyword">@finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keyData)</span><br><span class="line">        <span class="built_in">CFRelease</span>(keyData);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)deleteKeyData:(<span class="built_in">NSString</span> *)service &#123;</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *keychainQuery = [<span class="keyword">self</span> getKeychainQuery:service];</span><br><span class="line">    SecItemDelete((<span class="built_in">CFDictionaryRef</span>)keychainQuery);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>五、存储并获得UUID</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  得到设备的UUID</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @return 返回UUID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)getUUID&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> * strUUID = (<span class="built_in">NSString</span> *)[KeyChainStore load:KEY_APPID];</span><br><span class="line">    <span class="keyword">if</span> ([strUUID isEqualToString:<span class="string">@""</span>] || !strUUID)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CFUUIDRef</span> uuidRef = <span class="built_in">CFUUIDCreate</span>(kCFAllocatorDefault);</span><br><span class="line"></span><br><span class="line">        strUUID = (<span class="built_in">NSString</span> *)<span class="built_in">CFBridgingRelease</span>(<span class="built_in">CFUUIDCreateString</span> (kCFAllocatorDefault,uuidRef));</span><br><span class="line"></span><br><span class="line">        [KeyChainStore save:KEY_APPID data:strUUID];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> strUUID;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：这里的KEY_APPID是一个宏，里面值可以自己定义，建议用Bundle Identifier</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、在你的工程里找到Capabilities，把里面的keyChainsharing设置为ON，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/02/11/9G6fI0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;二、这样就会在左
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.ningcol.com/categories/iOS/"/>
    
    
      <category term="keyChain" scheme="http://www.ningcol.com/tags/keyChain/"/>
    
      <category term="UUID" scheme="http://www.ningcol.com/tags/UUID/"/>
    
  </entry>
  
  <entry>
    <title>设置UITextField左侧图片、光标起始位置</title>
    <link href="http://www.ningcol.com/2016/03/15/%E8%AE%BE%E7%BD%AEUITextField%E5%B7%A6%E4%BE%A7%E5%9B%BE%E7%89%87%E3%80%81%E5%85%89%E6%A0%87%E8%B5%B7%E5%A7%8B%E4%BD%8D%E7%BD%AE/"/>
    <id>http://www.ningcol.com/2016/03/15/设置UITextField左侧图片、光标起始位置/</id>
    <published>2016-03-15T12:31:02.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>一、我们通常在设计登录界面的时候会用到UITextField，如下图所示</p><p><img src="https://s1.ax1x.com/2018/02/11/9G6sxg.jpg" alt=""></p><p>1.左边显示图片</p><p>2.Textfield中间添加提示文字，并且希望能与UITextField左右有一些间距</p><p>二、左边显示图片可以把ImageView加到TextField里，其实可以有更简单的方法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UIImageView *passwordImage = <span class="string">[[UIImageView alloc] initWithImage:[UIImage imageNamed:@"passwordIcon"]]</span>;</span><br><span class="line">password.leftView = passwordImage;</span><br><span class="line">password.leftViewMode = UITextFieldViewModeAlways;</span><br></pre></td></tr></table></figure><p>三、设置占位符的位置和编辑状态时的位置试了很多方法感觉都不好用，最终找到了一个方法，自定义一个TextField继承至UITextField，然后重写下面的几个方法：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- <span class="params">(CGRect)</span>borderRectForBounds:<span class="params">(CGRect)</span>bounds;</span><br><span class="line">- <span class="params">(CGRect)</span>textRectForBounds:<span class="params">(CGRect)</span>bounds;</span><br><span class="line">- <span class="params">(CGRect)</span>placeholderRectForBounds:<span class="params">(CGRect)</span>bounds;</span><br><span class="line">- <span class="params">(CGRect)</span>editingRectForBounds:<span class="params">(CGRect)</span>bounds;</span><br><span class="line">- <span class="params">(CGRect)</span>clearButtonRectForBounds:<span class="params">(CGRect)</span>bounds;</span><br><span class="line">- <span class="params">(CGRect)</span>leftViewRectForBounds:<span class="params">(CGRect)</span>bounds;</span><br><span class="line">- <span class="params">(CGRect)</span>rightViewRectForBounds:<span class="params">(CGRect)</span>bounds;</span><br></pre></td></tr></table></figure><p>四、下面是具体的代码实现：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZLoginTextField</span> : <span class="title">UITextField</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ZLoginTextField.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ZLoginTextField</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">        <span class="keyword">self</span>.tintColor = [<span class="built_in">UIColor</span> lightGrayColor];</span><br><span class="line">        <span class="keyword">self</span>.layer.cornerRadius = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">self</span>.layer.borderWidth = <span class="number">0.6</span>;</span><br><span class="line">        <span class="keyword">self</span>.layer.masksToBounds = <span class="literal">YES</span>;</span><br><span class="line">        <span class="keyword">self</span>.layer.borderColor = [<span class="built_in">UIColor</span> lightGrayColor].CGColor;</span><br><span class="line">        <span class="keyword">self</span>.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//leftView偏移量</span></span><br><span class="line">- (<span class="built_in">CGRect</span>)leftViewRectForBounds:(<span class="built_in">CGRect</span>)bounds&#123;</span><br><span class="line">    <span class="built_in">CGRect</span> iconRect = [<span class="keyword">super</span> leftViewRectForBounds:bounds];</span><br><span class="line">    iconRect.origin.x += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> iconRect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  重写占位符的x值</span></span><br><span class="line">- (<span class="built_in">CGRect</span>)placeholderRectForBounds:(<span class="built_in">CGRect</span>)bounds&#123;</span><br><span class="line">    <span class="built_in">CGRect</span> placeholderRect = [<span class="keyword">super</span> placeholderRectForBounds:bounds];</span><br><span class="line">    placeholderRect.origin.x += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> placeholderRect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  重写文字输入时的X值</span></span><br><span class="line">- (<span class="built_in">CGRect</span>)editingRectForBounds:(<span class="built_in">CGRect</span>)bounds&#123;</span><br><span class="line">    <span class="built_in">CGRect</span> editingRect = [<span class="keyword">super</span> editingRectForBounds:bounds];</span><br><span class="line">    editingRect.origin.x += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> editingRect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  重写文字显示时的X值</span></span><br><span class="line">- (<span class="built_in">CGRect</span>)textRectForBounds:(<span class="built_in">CGRect</span>)bounds&#123;</span><br><span class="line">    <span class="built_in">CGRect</span> textRect = [<span class="keyword">super</span> editingRectForBounds:bounds];</span><br><span class="line">    textRect.origin.x += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> textRect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rightView偏移量</span></span><br><span class="line">-(<span class="built_in">CGRect</span>)rightViewRectForBounds:(<span class="built_in">CGRect</span>)bounds&#123;</span><br><span class="line">    <span class="built_in">CGRect</span> textRect = [<span class="keyword">super</span> rightViewRectForBounds:bounds];</span><br><span class="line">    textRect.origin.x -= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> textRect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>具体的间隔，偏移量自己多设置几个值，调调试试就知道是个怎么回事了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、我们通常在设计登录界面的时候会用到UITextField，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/02/11/9G6sxg.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1.左边显示图片&lt;/p&gt;
&lt;p&gt;2.Textfie
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.ningcol.com/categories/iOS/"/>
    
    
      <category term="UITextField" scheme="http://www.ningcol.com/tags/UITextField/"/>
    
      <category term="开发技巧" scheme="http://www.ningcol.com/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>点击UIView退出键盘</title>
    <link href="http://www.ningcol.com/2016/03/14/%E7%82%B9%E5%87%BBUIView%E9%80%80%E5%87%BA%E9%94%AE%E7%9B%98/"/>
    <id>http://www.ningcol.com/2016/03/14/点击UIView退出键盘/</id>
    <published>2016-03-14T02:41:02.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>一个简单的手势退出键盘，当我们有时候使用UITextField的时候，键盘可能会把输入框遮住，具体看实现代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> _<span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  设置手势隐藏键盘</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-(<span class="keyword">void</span>)setUpkeyboardHide&#123;</span><br><span class="line">    <span class="comment">//退出键盘</span></span><br><span class="line">    <span class="built_in">UITapGestureRecognizer</span> *tapGestureRecognizer = [[<span class="built_in">UITapGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(keyboardHide:)];</span><br><span class="line">    <span class="comment">//设置成NO表示当前控件响应后会传播到其他控件上，默认为YES。</span></span><br><span class="line">    tapGestureRecognizer.cancelsTouchesInView = <span class="literal">NO</span>;</span><br><span class="line">    <span class="comment">//将触摸事件添加到当前view</span></span><br><span class="line">    [<span class="keyword">self</span>.view addGestureRecognizer:tapGestureRecognizer];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)keyboardHide:(<span class="built_in">UITapGestureRecognizer</span>*)tap&#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.phoneField resignFirstResponder];</span><br><span class="line">    [<span class="keyword">self</span>.codeField resignFirstResponder];</span><br><span class="line">    [<span class="keyword">self</span>.pwdField resignFirstResponder];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的cancelsTouchesInView，大家有可以去网上查查相关资料。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个简单的手势退出键盘，当我们有时候使用UITextField的时候，键盘可能会把输入框遮住，具体看实现代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.ningcol.com/categories/iOS/"/>
    
    
      <category term="ios键盘" scheme="http://www.ningcol.com/tags/ios%E9%94%AE%E7%9B%98/"/>
    
      <category term="手势" scheme="http://www.ningcol.com/tags/%E6%89%8B%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>快速pop返回指定控制器</title>
    <link href="http://www.ningcol.com/2016/02/27/%E5%BF%AB%E9%80%9Fpop%E8%BF%94%E5%9B%9E%E6%8C%87%E5%AE%9A%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <id>http://www.ningcol.com/2016/02/27/快速pop返回指定控制器/</id>
    <published>2016-02-27T13:50:07.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>iOS中ViewController的跳转，比如我们从主页跳转到一级界面，又从一级界面跳转到二级界面…当我们需要一级一级返回的时候是没有问题的，可以直接使用navigationController popoViewControllerAnimated就行了，但是有些情况下我们需要马上返回到主页，而不是一级一级的返回(一级一级的跳转太累了)。具体实现请看下面代码</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种实现方式</span></span><br><span class="line">[self.navigationController <span class="string">popToViewController:</span>[self.navigationController.viewControllers <span class="string">objectAtIndex:</span><span class="number">1</span>] <span class="string">animated:</span>YES];</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line"> <span class="keyword">for</span> (UIViewController *vc <span class="keyword">in</span> self.navigationController.viewControllers) &#123;</span><br><span class="line"> <span class="comment">//这里的JGHomeController是你需要返回的控制器</span></span><br><span class="line">        <span class="keyword">if</span> ([vc <span class="string">isKindOfClass:</span>[JGHomeController <span class="class"><span class="keyword">class</span>]]) &#123;</span></span><br><span class="line">            [self.navigationController <span class="string">popToViewController:</span>vc <span class="string">animated:</span>YES];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;iOS中ViewController的跳转，比如我们从主页跳转到一级界面，又从一级界面跳转到二级界面…当我们需要一级一级返回的时候是没有问题的，可以直接使用navigationController popoViewControllerAnimated就行了，但是有些情况下我
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.ningcol.com/categories/iOS/"/>
    
    
      <category term="popToRootViewController" scheme="http://www.ningcol.com/tags/popToRootViewController/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods安装和简单使用</title>
    <link href="http://www.ningcol.com/2016/02/20/CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.ningcol.com/2016/02/20/CocoaPods安装和简单使用/</id>
    <published>2016-02-20T12:20:20.000Z</published>
    <updated>2018-02-12T02:52:25.482Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.CocoaPods是什么？</strong></p><p>当你开发iOS应用时，会经常使用到很多第三方开源类库，比如JSONKit，AFNetWorking等等。可能某个类库又用到其他类库，所以要 使用它，必须得另外下载其他类库，而其他类库又用到其他类库，“子子孙孙无穷尽也”，这也许是比较特殊的情况。总之小编的意思就是，手动一个个去下载所需 类库十分麻烦。另外一种常见情况是，你项目中用到的类库有更新，你必须得重新下载新版本，重新加入到项目中，十分麻烦。如果能有什么工具能解决这些恼人的 问题，那将“善莫大焉”。所以，你需要 CocoaPods。</p><p>CocoaPods应该是iOS最常用最有名的类库管理工具了，上述两个烦人的问题，通过cocoaPods，只需要一行命令就可以完全解决，当然 前提是你必须正确设置它。重要的是，绝大部分有名的开源类库，都支持CocoaPods。所以，作为iOS程序员的我们，掌握CocoaPods的使用是必不可少的基本技能了。</p><p><strong>2.如何下载和安装CocoaPods？</strong></p><p>在安装CocoaPods之前，首先要在本地安装好Ruby环境。至于如何在Mac中安装好Ruby环境，默认Mac系统中已经安装好。然后在终端中输入以下命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem <span class="keyword">install</span> cocoapods</span><br></pre></td></tr></table></figure><p>如果你在天朝，在终端中敲入这个命令之后，会发现半天没有任何反应。原因无他，因为那堵墙阻挡了cocoapods.org。我们可以用淘宝的Ruby镜像来访问cocoapods。按照下面的顺序在终端中敲入依次敲入命令：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> gem sources --remove https:<span class="comment">//rubygems.org/</span></span><br><span class="line"><span class="comment">//等有反应之后再敲入以下命令</span></span><br><span class="line"><span class="symbol">$</span> gem sources -a http:<span class="comment">//ruby.taobao.org/</span></span><br></pre></td></tr></table></figure><p>为了验证你的Ruby镜像是并且仅是taobao，可以用以下命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gem sources -l</span></span><br></pre></td></tr></table></figure><p>只有在终端中出现下面文字才表明你上面的命令是成功的：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"><span class="symbol">http:</span>//ruby.taobao<span class="meta">.org</span>/</span><br></pre></td></tr></table></figure><p>上面所有的命令完成之时，终端应该是这个的样子：</p><p> <img src="https://s1.ax1x.com/2018/02/11/9G6KV1.jpg" alt=""></p><p>这时候，你再次在终端中运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo gem install cocoapods</span></span><br></pre></td></tr></table></figure><p>等上十几秒钟，CocoaPods就可以在你本地下载并且安装好了，不再需要其他设置。敲入以上命令时，等待完成。</p><p>最后执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pod install</span></span><br></pre></td></tr></table></figure><p>出现Setting up CocoaPods master repo，说明Cocoapods在将它的信息下载到 ~/.cocoapods里。使用cd命令切换终端到该目录里，用du -sh *命令来查看文件大小，每隔几分钟查看一次，这个目录最终大小是100多M，就是完成了。</p><p><strong>3.如何使用CocoaPods?</strong></p><p><strong>利用CocoaPods，在项目中导入AFNetworking类库</strong></p><p>AFNetworking类库在GitHub地址是：<a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">https://github.com/AFNetworking/AFNetworking</a></p><p>为了确定AFNetworking是否支持CocoaPods，可以用CocoaPods的搜索功能验证一下。在终端中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pod search AFNetworking</span></span><br></pre></td></tr></table></figure><p>过几秒钟之后，你会在终端中看到关于AFNetworking类库的一些信息。比如：</p><p><img src="https://s1.ax1x.com/2018/02/11/9G6Q56.jpg" alt=""></p><p>​    这说明，AFNetworking是支持CocoaPods，所以我们可以利用CocoaPods将AFNetworking导入你的项目中。</p><p>​      首先，我们需要在我们的项目中加入CocoaPods的支持。先利用Xcode创建一个名字CocoaPodsDemo的项 目，用于以下的教程。创建好之后，在继续下一步之前，先看看以下截图，看看项目没有支持CocoaPods时的项目Xcode目录结构：</p><p><img src="https://s1.ax1x.com/2018/02/11/9G61PK.jpg" alt=""></p><p>上图等一下要跟项目支持CocoaPods之后的项目Xcode目录结构做对比。</p><p>你看到这里也许会问，CocoaPods为什么能下载AFNetworking呢，而不是下载其他类库呢？这个问题的答案是，有个文件来控制 CocoaPods该下载什么。这个文件就叫做“Podfile”（注意，一定得是这个文件名，而且没有后缀）。你创建一个Podfile文件，然后在里 面添加你需要下载的类库，也就是告诉CocoaPods，“某某和某某和某某某，快到碗里来！”。每个项目只需要一个Podfile文件。</p><p>我们先创建PodFile，在终端中进入（cd命令）你项目所在目录，然后在当前目录下，利用vim创建Podfile，运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim Podfile</span></span><br></pre></td></tr></table></figure><p>按i键，终端左下角出现Inset就可以输入：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'7.0'</span></span><br><span class="line">pod <span class="string">"AFNetworking"</span>, <span class="string">"~&gt; 2.0"</span></span><br></pre></td></tr></table></figure><p>注意，这段文字不是凭空生成的，可以在AFNetworking的github页面找到。这两句文字的意思是，当前AFNetworking支持的iOS最高版本是iOS 7.0, 要下载的AFNetworking版本是2.0。然后保存退出。</p><p>这时候，你会发现你的项目目录中，出现一个名字为Podfile的文件，而且文件内容就是你刚刚输入的内容。注意，Podfile文件应该和你的工程文件.xcodeproj在同一个目录下。</p><p>这时候，你就可以利用CocoPods下载AFNetworking类库了。还是在终端中的当前项目目录下，运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pod install</span></span><br></pre></td></tr></table></figure><p>因为是在你的项目中导入AFNetworking，这就是为什么这个命令需要你进入你的项目所在目录中运行。</p><p>运行上述命令之后，终端出现以下信息：</p><p><img src="https://s1.ax1x.com/2018/02/11/9G682D.jpg" alt=""></p><p>注意最后一句话，意思是：以后打开项目就用 CocoaPodsDemo.xcworkspace打开，而不是之前的.xcodeproj文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1.CocoaPods是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当你开发iOS应用时，会经常使用到很多第三方开源类库，比如JSONKit，AFNetWorking等等。可能某个类库又用到其他类库，所以要 使用它，必须得另外下载其他类库，而其他类库又用到其他类
      
    
    </summary>
    
      <category term="Xcode" scheme="http://www.ningcol.com/categories/Xcode/"/>
    
    
      <category term="CocoaPods" scheme="http://www.ningcol.com/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>自定义navigation左边返回按钮</title>
    <link href="http://www.ningcol.com/2015/12/27/%E8%87%AA%E5%AE%9A%E4%B9%89navigation%E5%B7%A6%E8%BE%B9%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE/"/>
    <id>http://www.ningcol.com/2015/12/27/自定义navigation左边返回按钮/</id>
    <published>2015-12-27T07:11:33.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>我们在开发的时候，会遇到自定义navigation左边返回按钮的情况，系统自带的button图片看上去比较大，或者有时候我们会换种图片上去，具体实现细节请看下面代码</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义返回按钮</span></span><br><span class="line">-(<span class="keyword">void</span>)configureLeftBtn&#123;</span><br><span class="line">    <span class="built_in">UIButton</span> *leftBtn = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br><span class="line">    [leftBtn setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"btn_icon_cancel_normal"</span>] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    leftBtn.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">55</span>/<span class="number">2</span>, <span class="number">38</span>/<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">UIBarButtonItem</span> *leftBtnItem = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithCustomView:leftBtn];</span><br><span class="line">    [leftBtn addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(clickLeftBtn) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.navigationItem.leftBarButtonItem = leftBtnItem;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置按钮点击返回事件</span></span><br><span class="line">-(<span class="keyword">void</span>)clickLeftBtn&#123;</span><br><span class="line">    [<span class="keyword">self</span>.navigationController popToRootViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在开发的时候，会遇到自定义navigation左边返回按钮的情况，系统自带的button图片看上去比较大，或者有时候我们会换种图片上去，具体实现细节请看下面代码&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.ningcol.com/categories/iOS/"/>
    
    
      <category term="UIBarButtonItem" scheme="http://www.ningcol.com/tags/UIBarButtonItem/"/>
    
      <category term="返回按钮" scheme="http://www.ningcol.com/tags/%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE/"/>
    
  </entry>
  
  <entry>
    <title>代码加载storyboard中的控制器</title>
    <link href="http://www.ningcol.com/2015/11/20/%E4%BB%A3%E7%A0%81%E5%8A%A0%E8%BD%BDstoryboard%E4%B8%AD%E7%9A%84%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <id>http://www.ningcol.com/2015/11/20/代码加载storyboard中的控制器/</id>
    <published>2015-11-20T02:34:23.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>我们大多用纯代码来写我们的项目，便于后期的更新和维护，但是有时候我们会遇到有些界面基本不会改变的情况，加之开发进度比较紧，我们就可以在storyboard创建控制器，加载storyboard并push里面的viewcontroller，具体实现如下</p><p>1.我们需要创建一个storyboard，名字为baseController。</p><p>2.然后拖动一个ViewController至我们创建的storyboard中，设置custom class里的Class为我们代码创建的ViewController，并设置storyboard ID为base，如图</p><p><img src="https://s1.ax1x.com/2018/02/11/9G6A8U.jpg" alt=""></p><p>3.加载storyboard里面的viewcontroller并push</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载storyboard</span></span><br><span class="line">   UIStoryboard* storyboard = [UIStoryboard <span class="string">storyboardWithName:</span>@<span class="string">"baseController"</span> <span class="string">bundle:</span>[NSBundle mainBundle]];</span><br><span class="line">   BaseViewController *baseVc = ( BaseViewController *)[storyboard <span class="string">instantiateViewControllerWithIdentifier:</span>@<span class="string">"base"</span>];</span><br><span class="line">   [basic <span class="string">setHidesBottomBarWhenPushed:</span>YES];</span><br><span class="line">   [self.navigationController <span class="string">pushViewController:</span>baseVc <span class="string">animated:</span>YES];</span><br></pre></td></tr></table></figure><p>注意：storyboardWithName:@”baseController”是代表加载”‘baseController”这个storyboard里面的标示符为”base”的这个控制器，因为一个storyboard的里面会有很多的控制器，我们就是通过这个找到它的，需要强调的是注意class和storyboard ID的区别。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们大多用纯代码来写我们的项目，便于后期的更新和维护，但是有时候我们会遇到有些界面基本不会改变的情况，加之开发进度比较紧，我们就可以在storyboard创建控制器，加载storyboard并push里面的viewcontroller，具体实现如下&lt;/p&gt;
&lt;p&gt;1.我们需
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.ningcol.com/categories/iOS/"/>
    
    
      <category term="storyboard" scheme="http://www.ningcol.com/tags/storyboard/"/>
    
      <category term="push" scheme="http://www.ningcol.com/tags/push/"/>
    
  </entry>
  
  <entry>
    <title>TabBarController之间的传值</title>
    <link href="http://www.ningcol.com/2015/11/04/TabBarController%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC/"/>
    <id>http://www.ningcol.com/2015/11/04/TabBarController之间的传值/</id>
    <published>2015-11-04T08:41:08.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>1.下图(JGHomeController)为第一个控制器，他的tabbarController的index为0，将要传值给JGJobListController为第二个控制器，传递的值为abc数组。 <img src="https://s1.ax1x.com/2018/02/11/9G6SDs.png" alt=""></p><p>2.JGJobListController控制器的头文件，需要声明abc属性。接下来就可以在m文件里使用abc了。</p><p><img src="https://s1.ax1x.com/2018/02/11/9G6pbn.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.下图(JGHomeController)为第一个控制器，他的tabbarController的index为0，将要传值给JGJobListController为第二个控制器，传递的值为abc数组。 &lt;img src=&quot;https://s1.ax1x.com/2018/0
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.ningcol.com/categories/iOS/"/>
    
    
      <category term="TabBarController" scheme="http://www.ningcol.com/tags/TabBarController/"/>
    
  </entry>
  
  <entry>
    <title>导出tableView数据至excel</title>
    <link href="http://www.ningcol.com/2015/08/27/%E5%AF%BC%E5%87%BAtableView%E6%95%B0%E6%8D%AE%E8%87%B3excel/"/>
    <id>http://www.ningcol.com/2015/08/27/导出tableView数据至excel/</id>
    <published>2015-08-27T05:41:08.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>0.开始的时候因为没有找到导出excel格式的文章，倒是找到了导出csv格式的文件的方法，但是由于中文乱码中文问题，问题一直没有找到好的解决方法。这里也稍微介绍一下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)exportCSV:(<span class="built_in">NSString</span> *)fileName &#123;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSOutputStream</span> *output = [[<span class="built_in">NSOutputStream</span> alloc] initToFileAtPath:fileName append:<span class="literal">YES</span>];  </span><br><span class="line">    [output open];  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (![output hasSpaceAvailable]) &#123;  </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"没有足够可用空间"</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSString</span> *header = <span class="string">@"学号,姓名\n"</span>;   <span class="comment">//这里是文件第一行的头（逗号是换列，\n是换行）  </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> uint8_t *headerString = (<span class="keyword">const</span> uint8_t *)[header cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];  </span><br><span class="line">        <span class="built_in">NSInteger</span> headerLength = [header lengthOfBytesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];  </span><br><span class="line">        <span class="built_in">NSInteger</span> result = [output write:headerString maxLength:headerLength];  </span><br><span class="line">        <span class="keyword">if</span> (result &lt;= <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"写入错误"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSArray</span> *students = [<span class="keyword">self</span> queryStudents];  </span><br><span class="line">        <span class="keyword">for</span> (Student *stu <span class="keyword">in</span> students) &#123;  </span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSString</span> *row = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@,%@\n"</span>, stu.num, stu.name];   <span class="comment">//循环插入数据&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;（逗号是换列，\n是换行）&lt;/span&gt;  </span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> uint8_t *rowString = (<span class="keyword">const</span> uint8_t *)[row cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];  </span><br><span class="line">            <span class="built_in">NSInteger</span> rowLength = [row lengthOfBytesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];  </span><br><span class="line">            result = [output write:rowString maxLength:rowLength];  </span><br><span class="line">            <span class="keyword">if</span> (result &lt;= <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"无法写入内容"</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        [output close];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产csv文件：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *documents = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDirectory</span>, <span class="literal">YES</span>);  </span><br><span class="line">   <span class="built_in">NSString</span> *docementDir = [documents objectAtIndex:<span class="number">0</span>];  </span><br><span class="line">   <span class="keyword">self</span>.filePath = [docementDir stringByAppendingPathComponent:<span class="string">@"Student.csv"</span>];  </span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"filePath = %@"</span>, <span class="keyword">self</span>.filePath);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   [<span class="keyword">self</span> createFile:<span class="keyword">self</span>.filePath];  </span><br><span class="line">   [<span class="keyword">self</span> exportCSV:<span class="keyword">self</span>.filePath];</span><br></pre></td></tr></table></figure><p>1.现在开始进入正题，要先下载微软的excel库文件<a href="https://www.libxl.com/download.html" target="_blank" rel="noopener">https://www.libxl.com/download.html</a>，解压</p><p>2.里面有example，可以参考一下、把LibXL.framework导入自己的项目当中，设置bitcode为no，以及linker也要改为<strong>-lstdc++</strong></p><p>3.上代码，导入头文件，设置代理</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"LibXL/libxl.h"</span></span></span><br></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@interface</span> JGdetailController ()<span class="variable">&lt;UITableViewDataSource,UITableViewDelegate,JGPeopleViewDelegate,UIDocumentInteractionControllerDelegate&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)clickBarButton&#123;  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"createExcel"</span>);  </span><br><span class="line"></span><br><span class="line">    BookHandle book = xlCreateBook(); <span class="comment">// use xlCreateXMLBook() for working with xlsx files  </span></span><br><span class="line"></span><br><span class="line">    SheetHandle sheet = xlBookAddSheet(book, <span class="string">"Sheet1"</span>, <span class="literal">NULL</span>);  </span><br><span class="line">    <span class="comment">//第一个参数代表插入哪个表，第二个是第几行（默认从0开始），第三个是第几列（默认从0开始）  </span></span><br><span class="line">    xlSheetWriteStr(sheet, <span class="number">1</span>, <span class="number">0</span>, <span class="string">"姓名"</span>, <span class="number">0</span>);  </span><br><span class="line">    xlSheetWriteStr(sheet, <span class="number">1</span>, <span class="number">1</span>, <span class="string">"性别"</span>, <span class="number">0</span>);  </span><br><span class="line">    xlSheetWriteStr(sheet, <span class="number">1</span>, <span class="number">2</span>, <span class="string">"学校"</span>, <span class="number">0</span>);  </span><br><span class="line">    xlSheetWriteStr(sheet, <span class="number">1</span>, <span class="number">3</span>, <span class="string">"电话"</span>, <span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">self</span>.nameArray.count; i++) &#123;  </span><br><span class="line">        <span class="keyword">const</span> charchar *name_c = [<span class="keyword">self</span>.nameArray[i] cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];  <span class="comment">//这里是将NSString字符串转为C语言字符串  </span></span><br><span class="line">        xlSheetWriteStr(sheet, i+<span class="number">2</span>, <span class="number">0</span>,name_c, <span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">self</span>.sexArray.count; i++) &#123;  </span><br><span class="line">        <span class="keyword">const</span> charchar *sex_c = [<span class="keyword">self</span>.sexArray[i] cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];  </span><br><span class="line">        xlSheetWriteStr(sheet, i+<span class="number">2</span>, <span class="number">1</span>,sex_c, <span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">self</span>.schoolArray.count; i++) &#123;  </span><br><span class="line">        <span class="keyword">const</span> charchar *school_c = [<span class="keyword">self</span>.schoolArray[i] cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];  </span><br><span class="line">        xlSheetWriteStr(sheet, i+<span class="number">2</span>, <span class="number">2</span>,school_c, <span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">self</span>.phoneArray.count; i++) &#123;  </span><br><span class="line">        <span class="keyword">const</span> charchar *phone_c = [<span class="keyword">self</span>.phoneArray[i] cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];  </span><br><span class="line">        xlSheetWriteStr(sheet, i+<span class="number">2</span>, <span class="number">3</span>,phone_c, <span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *documentPath =  </span><br><span class="line">    [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>,<span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) objectAtIndex:<span class="number">0</span>];  </span><br><span class="line">    <span class="built_in">NSString</span> *filename = [documentPath stringByAppendingPathComponent:<span class="string">@"out.xls"</span>];  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"filepath--%@"</span>,filename);  </span><br><span class="line"></span><br><span class="line">    xlBookSave(book, [filename UTF8String]);  </span><br><span class="line"></span><br><span class="line">    xlBookRelease(book);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//导出xls文件  </span></span><br><span class="line">    <span class="built_in">UIDocumentInteractionController</span> *docu = [<span class="built_in">UIDocumentInteractionController</span> interactionControllerWithURL:[<span class="built_in">NSURL</span> fileURLWithPath:filename]];  </span><br><span class="line"></span><br><span class="line">    docu.delegate = <span class="keyword">self</span>;  </span><br><span class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">320</span>, <span class="number">300</span>);  <span class="comment">//这里感觉没什么用  </span></span><br><span class="line"></span><br><span class="line">    [docu presentOpenInMenuFromRect:rect inView:<span class="keyword">self</span>.view animated:<span class="literal">YES</span>];  <span class="comment">//不写可以直接预览  </span></span><br><span class="line"></span><br><span class="line">    [docu presentPreviewAnimated:<span class="literal">YES</span>];  <span class="comment">//这句比较坑爹。如果不写这句，只写上面那句会弹出选择支持xls文件的APP。  </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//doucumentDelegate方法（必须实现，还有几个展示选择系统自带print还是啥的就不说了，可以自己研究下）  </span></span><br><span class="line">- ( <span class="built_in">UIViewController</span> *)documentInteractionControllerViewControllerForPreview:( <span class="built_in">UIDocumentInteractionController</span> *)interactionController&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.把模型tableView里面的数据取出来放在数组里：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.nameArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line"><span class="keyword">self</span>.sexArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line"><span class="keyword">self</span>.schoolArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line"><span class="keyword">self</span>.phoneArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line"><span class="keyword">for</span> (JGdetail *de <span class="keyword">in</span> <span class="keyword">self</span>.people) &#123;</span><br><span class="line">    [<span class="keyword">self</span>.nameArray addObject:de.name];</span><br><span class="line">    <span class="keyword">if</span>(de.sex == <span class="number">0</span>)&#123;</span><br><span class="line">        [<span class="keyword">self</span>.sexArray addObject:<span class="string">@"男"</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(de.sex == <span class="number">1</span>)&#123;</span><br><span class="line">        [<span class="keyword">self</span>.sexArray addObject:<span class="string">@"女"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">     [<span class="keyword">self</span>.schoolArray addObject:de.school];</span><br><span class="line">     [<span class="keyword">self</span>.phoneArray addObject:de.tel];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"nameArray---%@"</span>,<span class="keyword">self</span>.sexArray);</span><br></pre></td></tr></table></figure><p>5.这样就可以选择QQ打开生成的xls文件。效果如下，因为这个是要收费的，所以忽略第一行：</p><p><img src="https://s1.ax1x.com/2018/02/11/9Gyjgg.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;0.开始的时候因为没有找到导出excel格式的文章，倒是找到了导出csv格式的文件的方法，但是由于中文乱码中文问题，问题一直没有找到好的解决方法。这里也稍微介绍一下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.ningcol.com/categories/iOS/"/>
    
    
      <category term="UItableView" scheme="http://www.ningcol.com/tags/UItableView/"/>
    
      <category term="excel" scheme="http://www.ningcol.com/tags/excel/"/>
    
      <category term="导出数据" scheme="http://www.ningcol.com/tags/%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法简介</title>
    <link href="http://www.ningcol.com/2015/08/03/Markdown%E8%AF%AD%E6%B3%95%E7%AE%80%E4%BB%8B%C2%A0/"/>
    <id>http://www.ningcol.com/2015/08/03/Markdown语法简介 /</id>
    <published>2015-08-03T06:41:08.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 <em>Word</em> 或 <em>Pages</em> 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！</p><p>本文介绍Markdown基本语法，内容很少，一行语法一行示例，学会后可轻松写出高大上的文档，再也不需要各种编辑器去调文章格式。另外，网上有各平台下的Markdown工具可用，比如mou，ulysses(收费)，还有我自己的用的Typora，这篇文章就是用Typora写出来的，我用的是Mac，介绍的这三款都是Mac平台的。</p><hr><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">星号和下划线</span><br><span class="line">**这是mac**</span><br><span class="line">__markdown简介<span class="symbol">__</span></span><br><span class="line">*当你老了</span><br><span class="line">回顾一生*</span><br><span class="line"><span class="symbol">_</span>就会发觉<span class="symbol">_</span></span><br><span class="line">~~什么时候出国读书~~</span><br></pre></td></tr></table></figure><p><strong>这是mac</strong></p><p><strong>markdown简介</strong></p><p><em>当你老了</em></p><p><em>回顾一生</em></p><p><em>就会发觉</em></p><p><del>什么时候出国读书</del></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">三个或更多"-"，可以组成分隔线</span><br><span class="line">---</span><br></pre></td></tr></table></figure><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">引用</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 什么时候决定做第一份职业</span></span><br></pre></td></tr></table></figure><blockquote><p>什么时候决定做第一份职业</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">何时选定对象而恋爱</span></span><br><span class="line"><span class="meta"> &gt;</span><span class="bash">&gt;什么时候结婚</span></span><br></pre></td></tr></table></figure><blockquote><p>何时选定对象而恋爱  </p><blockquote><p>什么时候结婚</p></blockquote></blockquote><p>还有一级标题，二级标题，三级标题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注意中级还有空格</span><br><span class="line"><span class="meta">#</span><span class="bash"> 其实都是命运的巨变</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 只是当时站在三岔路口</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 还以为是生命中普通的一天</span></span></span><br></pre></td></tr></table></figure><h1 id="其实都是命运的巨变"><a href="#其实都是命运的巨变" class="headerlink" title="其实都是命运的巨变"></a>其实都是命运的巨变</h1><h2 id="只是当时站在三岔路口"><a href="#只是当时站在三岔路口" class="headerlink" title="只是当时站在三岔路口"></a>只是当时站在三岔路口</h2><h3 id="还以为是生命中普通的一天"><a href="#还以为是生命中普通的一天" class="headerlink" title="还以为是生命中普通的一天"></a>还以为是生命中普通的一天</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">无序列表</span><br><span class="line">-<span class="ruby"> 杀鹌鹑的少女</span></span><br><span class="line"><span class="ruby">- 杀鹌鹑的少女</span></span><br><span class="line"><span class="ruby">- 陶杰</span></span><br><span class="line"><span class="ruby">- 陶杰</span></span><br><span class="line"><span class="ruby">+ 哈哈</span></span><br><span class="line"><span class="ruby">+ 嘿嘿</span></span><br></pre></td></tr></table></figure><ul><li>杀鹌鹑的少女</li><li>杀鹌鹑的少女</li><li>陶杰</li><li>陶杰</li><li>哈哈</li><li>嘿嘿</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">超链接</span><br><span class="line">[<span class="string">百度</span>](<span class="link">https://www.baidu.com</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">图片</span><br><span class="line">![<span class="string">这是test图片</span>](<span class="link">/img/test.png</span>)</span><br></pre></td></tr></table></figure><p> <img src="https://s1.ax1x.com/2018/02/11/9GygN6.jpg" alt="这是test图片"></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">代码框</span><br><span class="line">`</span><br><span class="line"><span class="built_in">UITextField</span> *pwdLabel = [[<span class="built_in">UITextField</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">90</span>+i*<span class="number">40</span>, <span class="number">100</span>, <span class="number">30</span>, <span class="number">30</span>)];</span><br><span class="line">        pwdLabel.layer.borderColor = [<span class="built_in">UIColor</span> blackColor].CGColor;</span><br><span class="line">        pwdLabel.enabled = <span class="literal">NO</span>;</span><br><span class="line">        pwdLabel.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;<span class="comment">//居中</span></span><br><span class="line">        pwdLabel.secureTextEntry = <span class="literal">YES</span>;<span class="comment">//设置密码模式</span></span><br><span class="line">        pwdLabel.layer.borderWidth = <span class="number">1</span>;</span><br><span class="line">        [<span class="keyword">self</span>.view addSubview:pwdLabel];</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p><code>UITextField *pwdLabel = [[UITextField alloc] initWithFrame:CGRectMake(90+i*40, 100, 30, 30)];        pwdLabel.layer.borderColor = [UIColor blackColor].CGColor;        pwdLabel.enabled = NO;        pwdLabel.textAlignment = NSTextAlignmentCenter;//居中        pwdLabel.secureTextEntry = YES;//设置密码模式        pwdLabel.layer.borderWidth = 1;        [self.view addSubview:pwdLabel];</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 &lt;em&gt;Word&lt;/em&gt; 或 &lt;em&gt;Pages&lt;/em&gt; 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。其不追求大而全，简洁至
      
    
    </summary>
    
      <category term="Markdown" scheme="http://www.ningcol.com/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://www.ningcol.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>ios倒计时</title>
    <link href="http://www.ningcol.com/2015/08/01/IOS%E5%80%92%E8%AE%A1%E6%97%B6/"/>
    <id>http://www.ningcol.com/2015/08/01/IOS倒计时/</id>
    <published>2015-08-01T06:41:02.000Z</published>
    <updated>2018-02-12T02:52:25.482Z</updated>
    
    <content type="html"><![CDATA[<p>就是一个简单的倒计时，重要的是注意倒计时按钮的类型一定要设置成custom，不然按钮上面的文字会闪！！！</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">__block <span class="keyword">int</span> timeout= <span class="number">60</span>; <span class="comment">//倒计时时间  </span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);  </span><br><span class="line">  dispatch_source_t _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>,queue);  </span><br><span class="line">  dispatch_source_set_timer(_timer,dispatch_walltime(<span class="literal">NULL</span>, <span class="number">0</span>),<span class="number">1.0</span>*<span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span>); <span class="comment">//每秒执行  </span></span><br><span class="line">  dispatch_source_set_event_handler(_timer, ^&#123;  </span><br><span class="line">      <span class="keyword">if</span>(timeout&lt;=<span class="number">0</span>)&#123; <span class="comment">//倒计时结束，关闭  </span></span><br><span class="line">          dispatch_source_cancel(_timer);  </span><br><span class="line">          <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;  </span><br><span class="line">              <span class="comment">//设置界面的按钮显示 根据自己需求设置  </span></span><br><span class="line">              [<span class="keyword">self</span>.codeBtn setTitle:<span class="string">@"获取验证码"</span> forState:<span class="built_in">UIControlStateNormal</span>];  </span><br><span class="line">              [<span class="keyword">self</span>.codeBtn setTitleColor:RGBColor(<span class="number">53</span>, <span class="number">154</span>, <span class="number">243</span>, <span class="number">1</span>) forState:<span class="built_in">UIControlStateNormal</span>];  </span><br><span class="line">              <span class="keyword">self</span>.codeBtn.userInteractionEnabled = <span class="literal">YES</span>;  </span><br><span class="line"></span><br><span class="line">          &#125;);  </span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">          <span class="keyword">int</span> seconds = timeout % <span class="number">60</span>;  </span><br><span class="line">          <span class="keyword">if</span> (seconds ==<span class="number">00</span>) &#123;  </span><br><span class="line">              seconds = <span class="number">60</span>;  </span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="built_in">NSString</span> *strTime = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.2d"</span>, seconds];  </span><br><span class="line">          <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;  </span><br><span class="line">              <span class="comment">//设置界面的按钮显示 根据自己需求设置  </span></span><br><span class="line">              [<span class="built_in">UIView</span> beginAnimations:<span class="literal">nil</span> context:<span class="literal">nil</span>];  </span><br><span class="line">              [<span class="built_in">UIView</span> setAnimationDuration:<span class="number">1</span>];  </span><br><span class="line"></span><br><span class="line">              [<span class="keyword">self</span>.codeBtn setTitle:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@s后重新获取"</span>,strTime] forState:<span class="built_in">UIControlStateNormal</span>];  </span><br><span class="line">              [<span class="keyword">self</span>.codeBtn setTitleColor:[<span class="built_in">UIColor</span> grayColor] forState:<span class="built_in">UIControlStateNormal</span>];  </span><br><span class="line">              [<span class="built_in">UIView</span> commitAnimations];  </span><br><span class="line">              <span class="keyword">self</span>.codeBtn.userInteractionEnabled = <span class="literal">NO</span>;  </span><br><span class="line"></span><br><span class="line">          &#125;);  </span><br><span class="line"></span><br><span class="line">          timeout--;  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;);  </span><br><span class="line">  dispatch_resume(_timer);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;就是一个简单的倒计时，重要的是注意倒计时按钮的类型一定要设置成custom，不然按钮上面的文字会闪！！！&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="iOS" scheme="http://www.ningcol.com/categories/iOS/"/>
    
    
      <category term="UIButton" scheme="http://www.ningcol.com/tags/UIButton/"/>
    
      <category term="实用技巧" scheme="http://www.ningcol.com/tags/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>项目经理应该知道的97件事</title>
    <link href="http://www.ningcol.com/2015/07/27/%E4%B8%BA%E5%9B%A2%E9%98%9F%E5%A2%9E%E6%B7%BB%E4%BA%BA%E6%89%8D%E8%80%8C%E9%9D%9E%E6%8A%80%E8%83%BD/"/>
    <id>http://www.ningcol.com/2015/07/27/为团队增添人才而非技能/</id>
    <published>2015-07-27T02:41:08.000Z</published>
    <updated>2018-02-12T02:52:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>​                         </p><p>我过去采用的招聘标准同我们这个行业里的每一个人的招聘方式都是一样的：技能，技能，技能。直到有一天，一位来面试的应聘者当头泼我一盆冷水（这当然是一种比喻的说法），这次经历从此改变了我。</p><p> 当时我正期望为团队招纳一个有多年微软工作经验的能人。仔细翻阅了比尔的简历，我觉得他非常适合这个职位。他在所有相关技术方面都有六年多的经验。如果我能开出不错的薪酬，这将会是一件轻而易举的事。</p><p>比尔接受了面试。我们先聊了聊，然后我向他介绍了我们手头上的一些项目，并对他说他是多么适合这个职位。我信心十足地认为这次招聘会进展得很顺利。可是突然间我意识到我会招不到他。我中途停止了面谈，问比尔发生了什么事。我告诉他，他非常适合这个职位，也对他直说我感觉到他不会来。</p><p> 他的答复是：“理查德，如果我还想做过去六年来一直做的事情，我就会留在我现在的单位了。我听说你们即将开始一些非常酷、非常新的Java项目，所以我才会想来这儿工作，因为我把它看成一个学习和成长的机会。” </p><p>就在那时我才恍然大悟。用“按技能挑简历”的方式来招聘新人，对一个要创建团队的经理而言，实在是最愚蠢的方法。 </p><p>你知道，我和我的伙伴之所以会进入这个高新技术产业，正是因为我们希望走在科技的最前沿。我们没有一个人希望在职业生涯中重复使用自己在大学学到的那些技能。我们之所以进入这个行业，正是因为这个行业所涉及的永远都是新领域，永远都要学习新技能和新技术。</p><p> 但不知何时出现了严重的错误。我意识到我们在员工成长上已停止了投资。我们不是在寻找新的人才，我们一直寻找的只是非常具体的精良技能。现在我要告诉大家，如果你们看到一个雇主在聘用新人时要求其技能达到精确匹配，那么，这个雇主其实是说：“我们不打算投资你。”</p><p>对于所有努力创建强大团队的人，要给出的忠告是：请记住你要聘请的是人才而非专业技能。当为敏捷开发团队招聘技术专家时，我要找的是什么样的人才？他们需要具备的优良技能不过是在幼儿园里就培养的：</p><p> ●能和他人融洽相处吗？</p><p> ●能主动合作吗？</p><p> ●当完成任务后，会把自己的工作整理以做备用吗？ </p><p> ●会对新事物感到兴奋吗？</p><p> ●喜欢学习吗？</p><p> 至于技能，我可以教他。事实上在我们的敏捷团队环境中，学习技术简单而迅速。然而，教一个成年人如何主动合作几乎是不可能的。 聘用人才而不是技能，这是组建团队的一种完全不同的方式。那些满腔热情、打算同我肩并肩一起开创激动人心的未来新技术的人，才是我想与之共事的人。</p><p>—（理查德·谢里登）</p><p>​              </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​                         &lt;/p&gt;
&lt;p&gt;我过去采用的招聘标准同我们这个行业里的每一个人的招聘方式都是一样的：技能，技能，技能。直到有一天，一位来面试的应聘者当头泼我一盆冷水（这当然是一种比喻的说法），这次经历从此改变了我。&lt;/p&gt;
&lt;p&gt; 当时我
      
    
    </summary>
    
      <category term="项目管理" scheme="http://www.ningcol.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="项目经理" scheme="http://www.ningcol.com/tags/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E7%90%86/"/>
    
      <category term="团队" scheme="http://www.ningcol.com/tags/%E5%9B%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>Kail Linux安装VMtools文件</title>
    <link href="http://www.ningcol.com/2014/11/03/Kail%C2%A0Linux%E5%AE%89%E8%A3%85VMtools%E6%96%87%E4%BB%B6/"/>
    <id>http://www.ningcol.com/2014/11/03/Kail Linux安装VMtools文件/</id>
    <published>2014-11-03T05:53:51.000Z</published>
    <updated>2018-02-12T02:52:25.482Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在网上搜了半天如何在kail下安装tools工具，结果都没有成功，今天就来说说我是怎么安装成功的。</p><p>按照网上的办法只能到这一步，一直提示找不到路径，点了回车也会照常出现这样的情况。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Searching <span class="keyword">for</span> <span class="keyword">a</span> valid kernel header path...</span><br><span class="line">   The path <span class="string">""</span> is <span class="keyword">not</span> <span class="keyword">a</span> valid path <span class="built_in">to</span> <span class="keyword">the</span> <span class="number">3.7</span>-trunk<span class="number">-686</span>-pae kernel headers</span><br><span class="line">   Would you like <span class="built_in">to</span> change <span class="keyword">it</span>? [yes]</span><br></pre></td></tr></table></figure><p>这时你就会觉得是不是没有更新，其实你apt-get install linux-headers-3.7-trunk-686-pae也是没用的。</p><p>去查看<a href="https://docs.kali.org/" target="_blank" rel="noopener">kail官方文档</a>，发现apt-get install open-vm-tools也没用，即使是用它下面提供的方法安装一些VMware Tools安装器需要的包也没用。</p><h4 id="现在我们进入正题："><a href="#现在我们进入正题：" class="headerlink" title="现在我们进入正题："></a>现在我们进入正题：</h4><p>   1.修改修改sources.list文件：<br>    <strong>leafpad /etc/apt/sources.list</strong></p><p>   2.添加源文件，下面的源我加进去了中科大和阿里云的源，你们也可以选择一下，就是不知道安装tools的时候能不能成功。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#官方源</span></span><br><span class="line">deb http:<span class="comment">//http.kali.org/kali kali main non-free contrib</span></span><br><span class="line">deb-src http:<span class="comment">//http.kali.org/kali kali main non-free contrib</span></span><br><span class="line">deb http:<span class="comment">//security.kali.org/kali-security kali/updates main contrib non-free</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#激进源，新手不推荐使用这个软件源</span></span><br><span class="line">deb http:<span class="comment">//repo.kali.org/kali kali-bleeding-edge main</span></span><br><span class="line">deb-src http:<span class="comment">//repo.kali.org/kali kali-bleeding-edge main</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#中科大kali源</span></span><br><span class="line">deb http:<span class="comment">//mirrors.ustc.edu.cn/kali kali main non-free contrib</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.ustc.edu.cn/kali kali main non-free contrib</span></span><br><span class="line">deb http:<span class="comment">//mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#阿里云kali源</span></span><br><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/kali kali main non-free contrib</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.aliyun.com/kali kali main non-free contrib</span></span><br><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/kali-security kali/updates main contrib non-free</span></span><br></pre></td></tr></table></figure><p>3.安装tools</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#apt-<span class="built_in">get</span> <span class="keyword">update</span>                              </span><br><span class="line">#apt-<span class="built_in">get</span> install <span class="keyword">open</span>-<span class="keyword">vm</span>-tools</span><br></pre></td></tr></table></figure><p>到此， 然后你就会发现你的tools工具已经安装完毕了。</p><p><em>备注</em>：如果到现在还是不能把主机的文件拖到kail下的话，执行</p><pre><code>#**apt-get remove open-vm-tools**     </code></pre><p>然后再去安装虚拟机提供的vmtools</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#cp</span> VMwareTools-<span class="number">5.5</span>.<span class="number">1</span>-<span class="number">19175</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> /tmp </span><br><span class="line"><span class="selector-id">#cd</span> /tmp</span><br><span class="line"><span class="selector-id">#tar</span> zxpf VMwareTools-<span class="number">5.5</span>.<span class="number">1</span>-<span class="number">19175</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"><span class="selector-id">#cd</span> vmware-tools-distrib </span><br><span class="line">#./vmware-install.pl</span><br></pre></td></tr></table></figure><ol><li>重启虚拟机就可以了，就可以把文件拖到虚拟机了</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天在网上搜了半天如何在kail下安装tools工具，结果都没有成功，今天就来说说我是怎么安装成功的。&lt;/p&gt;
&lt;p&gt;按照网上的办法只能到这一步，一直提示找不到路径，点了回车也会照常出现这样的情况。&lt;/p&gt;
&lt;figure class=&quot;highlight livecode
      
    
    </summary>
    
      <category term="Kail" scheme="http://www.ningcol.com/categories/Kail/"/>
    
    
      <category term="kail linux" scheme="http://www.ningcol.com/tags/kail-linux/"/>
    
      <category term="VMware " scheme="http://www.ningcol.com/tags/VMware/"/>
    
  </entry>
  
</feed>
